<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- OPML generated by OPML Editor v10.1b19 on Mon, 07 Dec 2020 16:04:20 GMT -->
<opml version="2.0">
	<head>
		<title>nodeEditor: feedBase</title>
		<dateCreated>Wed, 24 Jan 2018 16:13:56 GMT</dateCreated>
		<dateModified>Mon, 07 Dec 2020 16:04:20 GMT</dateModified>
		<ownerName>Dave Winer</ownerName>
		<ownerId>http://davewiner.com/</ownerId>
		<expansionState>1, 4, 23, 103, 104, 105, 110, 111, 112, 119, 120, 121, 123, 131, 134, 137, 138, 140, 146, 149, 152, 164, 165, 167, 169, 171, 178, 182, 184, 187, 189, 190, 197, 200, 204, 209, 211, 212, 227, 229, 232, 242, 243, 244, 266, 268, 269, 298, 321, 322, 328, 344, 345, 346, 352, 353, 354, 362, 363, 364, 365, 372, 373, 381, 382, 384, 392, 393, 394, 421, 422, 424</expansionState>
		<vertScrollState>129</vertScrollState>
		<windowTop>67</windowTop>
		<windowLeft>868</windowLeft>
		<windowBottom>1241</windowBottom>
		<windowRight>2203</windowRight>
		</head>
	<body>
		<outline text="/scripting.com/code/feedbase/">
			<outline text="notes" isComment="true">
				<outline text="mysql --password ">
					<outline text="password -- gimppimp"/>
					</outline>
				<outline text="use feedbase"/>
				<outline text=""/>
				<outline text="new database with proper charsets">
					<outline text="ALTER DATABASE feedbase CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci;"/>
					<outline text=""/>
					<outline text="ALTER TABLE feeds CHANGE title title VARCHAR(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;"/>
					<outline text="ALTER TABLE feeds CHANGE description description VARCHAR(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;"/>
					<outline text="ALTER TABLE subscriptions CHANGE username username VARCHAR(32) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;"/>
					<outline text=""/>
					<outline text=""/>
					<outline text=""/>
					<outline text="ALTER TABLE feeds CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;"/>
					<outline text="ALTER TABLE subscriptions CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;"/>
					<outline text=""/>
					<outline text=""/>
					<outline text=""/>
					<outline text="we do have to delete and re-create the database because we need to set the default encoding"/>
					<outline text="create table subscriptions (username varchar (255), listname varchar (255), feedUrl varchar (512), whenupdated datetime, PRIMARY KEY (feedUrl, username));"/>
					</outline>
				<outline text=""/>
				<outline text=""/>
				<outline text=""/>
				<outline text="select * from subscriptions where username = &quot;davewiner&quot;;"/>
				<outline text=""/>
				<outline text="create table subscriptions (username varchar (255), listname varchar (255), feedUrl varchar (512), whenupdated datetime, PRIMARY KEY (feedUrl, username));"/>
				<outline text=""/>
				<outline text="create table feeds (feedUrl varchar (512), title varchar (255), htmlUrl varchar (512), description varchar (512), whenUpdated datetime, countSubs int, ctSecs float, code int, ctErrors INT DEFAULT 0, ctConsecutiveErrors INT DEFAULT 0, ctChecks INT DEFAULT 0, whenLastError DATETIME, PRIMARY KEY (feedUrl));"/>
				<outline text=""/>
				<outline text="queries">
					<outline text="delete from feeds where code = 404;"/>
					<outline text="delete from feeds where title is null;"/>
					<outline text="select * from feeds where feedurl = &quot;http://www.rootstrikers.org/blog.rss&quot;;"/>
					<outline text="select * from feeds where ctConsecutiveErrors &gt; 0;"/>
					<outline text="delete from subscriptions where username = &quot;davewiner&quot; and feedUrl = &quot;https://mondaynote.com/feed&quot;;"/>
					<outline text=""/>
					<outline text=""/>
					<outline text="hotlist">
						<outline text=""/>
						<outline text="SELECT subscriptions.feedurl, feeds.title, COUNT(subscriptions.feedurl) AS countSubs FROM subscriptions, feeds WHERE subscriptions.feedurl = feeds.feedurl and feeds.title is not null GROUP BY feedurl ORDER BY countSubs DESC LIMIT 100;"/>
						</outline>
					<outline text=""/>
					<outline text=""/>
					<outline text=""/>
					</outline>
				<outline text=""/>
				<outline text="conversion">
					<outline text="ALTER TABLE feeds MODIFY title VARCHAR(255) CHARACTER SET utf8 COLLATE utf8_general_ci;"/>
					</outline>
				<outline text="set listname to main.opml for all records in table">
					<outline text="update subscriptions set listname = &quot;main.opml&quot;;"/>
					</outline>
				<outline text=""/>
				<outline text=""/>
				<outline text="running on desktop ">
					<outline text=""/>
					<outline text="export PATH=$PATH:/Applications/MySQLWorkbench.app/Contents/MacOS"/>
					<outline text="mysql --password"/>
					</outline>
				<outline text=""/>
				<outline text=""/>
				<outline text="12/3/20; 12:12:29 PM by DW" isComment="true">
					<outline text="alter table subscriptions add categories varchar(1024);"/>
					<outline text="select * from subscriptions where username = 'davewiner' and feedurl = 'http://www.techmeme.com/index.xml';"/>
					<outline text=""/>
					</outline>
				<outline text=""/>
				<outline text="old stuff">
					<outline text="tell me about my database">
						<outline text="name == feedbase"/>
						<outline text="one table, name == subscriptions">
							<outline text="username"/>
							<outline text="listname"/>
							<outline text="feedurl"/>
							<outline text="when"/>
							</outline>
						<outline text="commands">
							<outline text="mysql --password "/>
							<outline text="create database feedbase;"/>
							<outline text="use feedbase;"/>
							</outline>
						<outline text="REPLACE INTO subscriptions (username, listname, feedurl, whenCreated) VALUES ('zanshin', 'feedly-0afaf125-20c2-43ee-a9e9-8169f123e322-2016-10-13.opml', ''https://blog.jessfraz.com/index.xml');"/>
						<outline text="sqltext == REPLACE INTO subscriptions (username, listname, feedurl, whenCreated) VALUES ('stuartfrisby', 'Subscriptions.opml', ''http://www.wsc.co.uk/index2.php?option=com_rss&amp;feed=RSS2.0&amp;no_html=1', 2018-01-25 12:26:21');"/>
						</outline>
					<outline text="first table, subscriptions">
						<outline text="create table subscriptions (username varchar (255), listname varchar (255), feedurl varchar (512), whenupdated datetime, PRIMARY KEY (feedurl, username));"/>
						<outline text="old call">
							<outline text="create table subscriptions (username varchar (255), listname varchar (255), feedurl varchar (512), whenupdated datetime, PRIMARY KEY (feedurl, username));"/>
							</outline>
						</outline>
					<outline text="a second table, feeds">
						<outline text="create table feeds (feedurl varchar (512), title varchar (255), htmlurl varchar (512), description varchar (512), whenupdated datetime, countSubs int, PRIMARY KEY (feedurl));"/>
						</outline>
					<outline text="query to generate top 100 list">
						<outline text="SELECT feedurl, COUNT(feedurl) AS countSubs FROM subscriptions GROUP BY feedurl ORDER BY countSubs DESC LIMIT 100;"/>
						</outline>
					<outline text="a query to make the hotlist jump to life">
						<outline text="SELECT subscriptions.feedurl, feeds.title, COUNT(subscriptions.feedurl) AS countSubs FROM subscriptions, feeds WHERE subscriptions.feedurl = feeds.feedurl GROUP BY feedurl ORDER BY countSubs DESC LIMIT 100;"/>
						</outline>
					<outline text="query to delete all subs from a list by a user">
						<outline text="delete from subscriptions where username = &quot;davewiner&quot; and listname = &quot;subs.opml&quot;;"/>
						</outline>
					<outline text="an all new query to get subs for one user">
						<outline text="SELECT s.feedurl, f.title FROM subscriptions AS s, feeds AS f WHERE s.feedurl = f.feedurl AND s.username = 'davewiner' ORDER BY s.whenupdated DESC;"/>
						</outline>
					<outline text="query to get all subs for a user including the subscription count for each feed">
						<outline text="SELECT subscriptions.feedurl, feeds.title, COUNT(subscriptions.feedurl) AS countSubs FROM subscriptions, feeds WHERE subscriptions.feedurl = feeds.feedurl and subscriptions.username = &quot;davewiner&quot; GROUP BY feedurl ORDER BY countSubs DESC;"/>
						</outline>
					<outline text="query to get least-recently updated feed">
						<outline text="select feedurl from feeds where whenupdated = (select (min (whenupdated)"/>
						<outline text="SELECT feedurl, whenupdated FROM feeds ORDER BY whenupdated ASC LIMIT 1;"/>
						</outline>
					<outline text="command to add a column to an existing table">
						<outline text="ALTER TABLE feeds ADD ctSecs FLOAT;"/>
						<outline text="ALTER TABLE feeds ADD code int;"/>
						<outline text="ALTER TABLE feeds ADD ctErrors INT DEFAULT 0;"/>
						<outline text="ALTER TABLE feeds ADD ctConsecutiveErrors INT DEFAULT 0;"/>
						<outline text="ALTER TABLE feeds ADD ctChecks INT DEFAULT 0;"/>
						<outline text="ALTER TABLE feeds ADD whenLastError DATETIME;"/>
						<outline text=""/>
						<outline text=""/>
						</outline>
					<outline text=""/>
					<outline text=""/>
					<outline text=""/>
					<outline text="tcp.httpreadurl (&quot;http://rockaway.scripting.com:1406/reload&quot;)">
						<outline text="&quot;0 files changed&quot;" isComment="true"/>
						</outline>
					</outline>
				</outline>
			<outline text="package.json">
				<outline text="{">
					<outline text="&quot;name&quot;: &quot;feedbase&quot;,"/>
					<outline text="&quot;description&quot;: &quot;Let's get some feeds into a database.&quot;,"/>
					<outline text="&quot;author&quot;: &quot;Dave Winer &lt;dave@scripting.com&gt;&quot;,"/>
					<outline text="&quot;version&quot;: &quot;0.7.1&quot;,"/>
					<outline text="&quot;dependencies&quot; : {">
						<outline text="&quot;mysql&quot;: &quot;*&quot;,"/>
						<outline text="&quot;request&quot;: &quot;*&quot;,"/>
						<outline text="&quot;crypto&quot;: &quot;*&quot;, "/>
						<outline text="&quot;feedparser&quot;: &quot;*&quot;,"/>
						<outline text="&quot;dateformat&quot;: &quot;*&quot;,"/>
						<outline text="&quot;daveutils&quot;: &quot;*&quot;,"/>
						<outline text="&quot;davefeedread&quot;: &quot;*&quot;,"/>
						<outline text="&quot;davetwitter&quot;: &quot;*&quot;,"/>
						<outline text="&quot;daveopml&quot;: &quot;*&quot;,"/>
						<outline text="&quot;daves3&quot;: &quot;*&quot;,"/>
						<outline text="&quot;s3folderloader&quot;: &quot;*&quot;"/>
						<outline text="}, "/>
						</outline>
					<outline text="&quot;license&quot;: &quot;MIT&quot;,"/>
					<outline text="&quot;engines&quot;: {">
						<outline text="&quot;node&quot;: &quot;*&quot;"/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="feedbase.js">
				<outline text="var myProductName = &quot;feedBase&quot;, myVersion = &quot;0.7.1&quot;; " created="Mon, 03 Feb 2014 03:21:03 GMT" pgfnum="36831"/>
				<outline text=""/>
				<outline text="/*  The MIT License (MIT) ">
					<outline text="Copyright (c) 2014-2018 Dave Winer"/>
					<outline text=""/>
					<outline text="Permission is hereby granted, free of charge, to any person obtaining a copy"/>
					<outline text="of this software and associated documentation files (the &quot;Software&quot;), to deal"/>
					<outline text="in the Software without restriction, including without limitation the rights"/>
					<outline text="to use, copy, modify, merge, publish, distribute, sublicense, and/or sell"/>
					<outline text="copies of the Software, and to permit persons to whom the Software is"/>
					<outline text="furnished to do so, subject to the following conditions:"/>
					<outline text=""/>
					<outline text="The above copyright notice and this permission notice shall be included in all"/>
					<outline text="copies or substantial portions of the Software."/>
					<outline text=""/>
					<outline text="THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR"/>
					<outline text="IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,"/>
					<outline text="FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE"/>
					<outline text="AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER"/>
					<outline text="LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,"/>
					<outline text="OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE"/>
					<outline text="SOFTWARE."/>
					<outline text="*/"/>
					</outline>
				<outline text=""/>
				<outline text="const mysql = require (&quot;mysql&quot;);"/>
				<outline text="const utils = require (&quot;daveutils&quot;);"/>
				<outline text="const fs = require (&quot;fs&quot;);"/>
				<outline text="const request = require (&quot;request&quot;);"/>
				<outline text="const opml = require (&quot;daveopml&quot;);"/>
				<outline text="const dateFormat = require (&quot;dateformat&quot;);"/>
				<outline text="const s3 = require (&quot;daves3&quot;); "/>
				<outline text="const folderloader = require (&quot;s3folderloader&quot;);" isComment="true"/>
				<outline text="const davehttp = require (&quot;davehttp&quot;); "/>
				<outline text="const davetwitter = require (&quot;davetwitter&quot;);"/>
				<outline text="const feedParser = require (&quot;feedparser&quot;);"/>
				<outline text="const crypto = require (&quot;crypto&quot;);"/>
				<outline text="const feedRead = require (&quot;davefeedread&quot;); //3/31/18 by DW"/>
				<outline text=""/>
				<outline text="var config = {">
					<outline text="flFeedUpdates: true, //if false we don't check feeds for changed info, useful for test servers -- 4/7/18 by DW"/>
					<outline text="ctSecsBetwFeedUpdates: 15,"/>
					<outline text="minSecsBetwSingleFeedUpdate: 60 * 15, //at least 15 minutes betw checks for each feed"/>
					<outline text="outlineImportFolder: &quot;outlines/&quot;,"/>
					<outline text="usersFolder: &quot;users/&quot;,"/>
					<outline text="fnamePrefs: &quot;prefs.json&quot;, //each user's prefs file"/>
					<outline text="fnameOpml: &quot;subs.opml&quot;,"/>
					<outline text="fnameLastUploadedOpml: &quot;lastUploaded.opml&quot;, "/>
					<outline text="defaultListName: &quot;main.opml&quot;," isComment="true"/>
					<outline text="fnameS3backup: &quot;s3Backup.opml&quot;,"/>
					<outline text="fnameStats: &quot;data/stats.json&quot;, //stats for the app"/>
					<outline text="fnameLog: &quot;data/log.json&quot;, "/>
					<outline text="logsFolder: &quot;data/logs/&quot;,"/>
					<outline text="savedFeedInfoFolder: &quot;data/feeds/&quot;,"/>
					<outline text="fnameFeedInfo: &quot;feedInfo.json&quot;,"/>
					<outline text="port: 1405," isComment="true"/>
					<outline text="flLogToConsole: true," isComment="true"/>
					<outline text="flAllowAccessFromAnywhere: true, //for davehttp" isComment="true"/>
					<outline text="s3path: &quot;/scripting.com/code/feedbase/&quot;," isComment="true"/>
					<outline text=""/>
					<outline text="opmlS3path: &quot;/opml.feedbase.io/&quot;, //2/28/18 by DW -- where we save each users' OPML file"/>
					<outline text="opmlS3url: &quot;http://opml.feedbase.io/&quot;,"/>
					<outline text=""/>
					<outline text="requestTimeoutSecs: 3,"/>
					<outline text="homepage: {">
						<outline text="pagetitle: &quot;feedBase&quot;,"/>
						<outline text="urlTwitterServer: &quot;http://feedbase.io/&quot;"/>
						<outline text="},"/>
						</outline>
					<outline text="urlFavicon: &quot;http://scripting.com/favicon.ico&quot;,"/>
					<outline text="urlServerHomePageSource: &quot;http://scripting.com/code/feedbase/index.html&quot;,"/>
					<outline text="urlServerHomePageSource: &quot;http://scripting.com/code/syo/index.html&quot;," isComment="true"/>
					<outline text="ctSecsHomepageCache: 1, //set it higher for stable production server"/>
					<outline text=""/>
					<outline text="whenHotlistCreated: new Date (&quot;Fri, 09 Mar 2018 17:46:45 GMT&quot;),"/>
					<outline text="hotlistTitle: &quot;feedBase hotlist in OPML&quot;,"/>
					<outline text="s3HotlistPath: &quot;hotlist.opml&quot;,"/>
					<outline text=""/>
					<outline text="ctHotlistItems: 150, //4/2/18 by DW"/>
					<outline text=""/>
					<outline text="maxLengthFeedDescription: 512, //4/5/18 by DW"/>
					<outline text="maxLengthFeedTitle: 255, //4/5/18 by DW"/>
					<outline text="backupFolder: &quot;data/backups/&quot;, //11/27/19 by DW"/>
					<outline text=""/>
					<outline text="duplicateUrlMap: { //4/8/18 by DW">
						<outline text="&quot;http://www.scripting.com/rss.xml&quot;: &quot;http://scripting.com/rss.xml&quot;,"/>
						<outline text=""/>
						<outline text="&quot;http://ranchero.com/xml/rss.xml&quot;: &quot;http://inessential.com/xml/rss.xml&quot;,"/>
						<outline text=""/>
						<outline text="&quot;https://daringfireball.net/feeds/main&quot;: &quot;http://daringfireball.net/feeds/main&quot;,"/>
						<outline text="&quot;http://daringfireball.net/index.xml&quot;: &quot;http://daringfireball.net/feeds/main&quot;,"/>
						<outline text="&quot;http://daringfireball.net/feeds/main&quot;: &quot;http://daringfireball.net/feeds/main&quot;,"/>
						<outline text=""/>
						<outline text="&quot;http://feeds.feedburner.com/codinghorror&quot;: &quot;http://feeds.feedburner.com/codinghorror/&quot;,"/>
						<outline text=""/>
						<outline text="&quot;http://xkcd.com/atom.xml&quot;: &quot;http://xkcd.com/rss.xml&quot;,"/>
						<outline text="&quot;https://xkcd.com/rss.xml&quot;: &quot;http://xkcd.com/rss.xml&quot;,"/>
						<outline text=""/>
						<outline text="&quot;http://www.randsinrepose.com/index.xml&quot;: &quot;http://randsinrepose.com/feed/&quot;,"/>
						<outline text=""/>
						<outline text="&quot;http://www.marco.org/rss&quot;: &quot;http://marco.org/rss&quot;,"/>
						<outline text=""/>
						<outline text="&quot;http://scobleizer.com/feed/&quot;: &quot;http://scobleizer.blog/feed/&quot;,"/>
						<outline text=""/>
						<outline text="&quot;http://www.joelonsoftware.com/rss.xml&quot;: &quot;https://www.joelonsoftware.com/feed/&quot;"/>
						<outline text="}"/>
						</outline>
					<outline text="duplicateUrlMap: { //4/8/18 by DW" isComment="true">
						<outline text="&quot;http://www.scripting.com/rss.xml&quot;: &quot;http://scripting.com/rss.xml&quot;,"/>
						<outline text="&quot;http://ranchero.com/xml/rss.xml&quot;: &quot;http://inessential.com/xml/rss.xml&quot;,"/>
						<outline text="&quot;https://daringfireball.net/feeds/main&quot;: &quot;http://daringfireball.net/index.xml&quot;,"/>
						<outline text="&quot;http://daringfireball.net/feeds/main&quot;: &quot;http://daringfireball.net/index.xml&quot;,"/>
						<outline text="&quot;http://feeds.feedburner.com/codinghorror&quot;: &quot;http://feeds.feedburner.com/codinghorror/&quot;,"/>
						<outline text="&quot;http://xkcd.com/atom.xml&quot;: &quot;http://xkcd.com/rss.xml&quot;,"/>
						<outline text="&quot;https://xkcd.com/rss.xml&quot;: &quot;http://xkcd.com/rss.xml&quot;,"/>
						<outline text="&quot;http://randsinrepose.com/feed/&quot;: &quot;http://www.randsinrepose.com/index.xml&quot;,"/>
						<outline text="&quot;https://www.joelonsoftware.com/feed/&quot;: &quot;http://www.joelonsoftware.com/rss.xml&quot;"/>
						<outline text="}"/>
						</outline>
					<outline text="};"/>
					</outline>
				<outline text="const fnameConfig = &quot;config.json&quot;;"/>
				<outline text=""/>
				<outline text="var stats = {">
					<outline text="productName: myProductName,"/>
					<outline text="version: myVersion,"/>
					<outline text=""/>
					<outline text="ctStartups: 0,"/>
					<outline text="whenLastStartup: new Date (),"/>
					<outline text="ctHits: 0,"/>
					<outline text="ctHitsToday: 0,"/>
					<outline text="ctHitsThisRun: 0,"/>
					<outline text="whenLastHit: new Date (),"/>
					<outline text=""/>
					<outline text="ctFeedUpdates: 0,"/>
					<outline text="ctFeedUpdatesToday: 0,"/>
					<outline text="ctFeedUpdatesThisRun: 0,"/>
					<outline text="whenLastFeedUpdate: new Date (),"/>
					<outline text="whenLastDayRollover: new Date (),"/>
					<outline text="whenLastHotlistChange: new Date (), "/>
					<outline text="whenLastLogChange: new Date (), "/>
					<outline text=""/>
					<outline text="ctSubscriptions: undefined, //4/1/18 by DW"/>
					<outline text="ctFeeds: undefined, //4/1/18 by DW"/>
					<outline text=""/>
					<outline text="lastFeedUpdate: {">
						<outline text="}"/>
						</outline>
					<outline text="};"/>
					</outline>
				<outline text="var flStatsChanged = false;"/>
				<outline text=""/>
				<outline text="var theSqlConnectionPool = undefined; "/>
				<outline text="var flOneConsoleMsgInLastMinute = false;"/>
				<outline text="var whenLastHomepageRead = new Date (0), homepageCache = undefined;"/>
				<outline text="var flHotlistChanged = false;"/>
				<outline text=""/>
				<outline text=""/>
				<outline text="function hashMD5 (s) {">
					<outline text="return (crypto.createHash (&quot;md5&quot;).update (s).digest (&quot;hex&quot;));"/>
					<outline text="}"/>
					</outline>
				<outline text="function popProtocol (url) { //remove &quot;http&quot; from the beginning of http://xxx.yyy">
					<outline text="var protocol = utils.stringNthField (url, &quot;:&quot;, 1);"/>
					<outline text="return (utils.stringDelete (url, 1, protocol.length));"/>
					<outline text="}"/>
					</outline>
				<outline text="function derefUrl (url, callback) {">
					<outline text="Changes" isComment="true">
						<outline text="4/19/18; 12:54:15 PM by DW">
							<outline text="If the difference between the two URLs is just http vs https, return the http version."/>
							</outline>
						</outline>
					<outline text="var theRequest = {" created="Thu, 31 Jul 2014 16:39:00 GMT" pgfnum="43066">
						<outline text="method: &quot;HEAD&quot;, " created="Thu, 31 Jul 2014 16:39:06 GMT" pgfnum="43067"/>
						<outline text="url: url, " created="Thu, 31 Jul 2014 16:39:22 GMT" pgfnum="43070"/>
						<outline text="followAllRedirects: true," created="Thu, 31 Jul 2014 16:39:18 GMT" pgfnum="43069"/>
						<outline text="maxRedirects: 5"/>
						<outline text="};" created="Thu, 31 Jul 2014 16:39:13 GMT" pgfnum="43068"/>
						</outline>
					<outline text="request (theRequest, function (err, response) {">
						<outline text="if (err) {" created="Thu, 31 Jul 2014 16:39:35 GMT" pgfnum="43071">
							<outline text="callback (err);"/>
							<outline text="}" created="Thu, 31 Jul 2014 16:39:38 GMT" pgfnum="43072"/>
							</outline>
						<outline text="else {" created="Thu, 31 Jul 2014 16:39:39 GMT" pgfnum="43073">
							<outline text="var newUrl = response.request.href;"/>
							<outline text="console.log (&quot;derefUrl: popProtocol (newUrl) == &quot; + popProtocol (newUrl));" isComment="true"/>
							<outline text="console.log (&quot;derefUrl: popProtocol (url) == &quot; + popProtocol (url));" isComment="true"/>
							<outline text="if (popProtocol (newUrl) == popProtocol (url)) {">
								<outline text="newUrl = url;"/>
								<outline text="}"/>
								</outline>
							<outline text="callback (undefined, newUrl);"/>
							<outline text="}" created="Thu, 31 Jul 2014 16:39:41 GMT" pgfnum="43074"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function isFolder (f) {">
					<outline text="return (fs.lstatSync (f).isDirectory ());"/>
					<outline text="}"/>
					</outline>
				<outline text="function statsChanged () {">
					<outline text="flStatsChanged = true;"/>
					<outline text="}"/>
					</outline>
				<outline text="function hotlistChanged () {">
					<outline text="flHotlistChanged = true; //3/22/18 by DW"/>
					<outline text="stats.whenLastHotlistChange = new Date (); //3/16/18 by DW"/>
					<outline text="statsChanged ();"/>
					<outline text="}"/>
					</outline>
				<outline text="function processHomepageText (s) { //2/1/18 by DW">
					<outline text="var pagetable = new Object (), pagetext;"/>
					<outline text="utils.copyScalars (config.homepage, pagetable);"/>
					<outline text="pagetable.productName = myProductName;"/>
					<outline text="pagetable.version = myVersion;"/>
					<outline text="pagetable.configJson = utils.jsonStringify (pagetable);"/>
					<outline text="" isComment="true"/>
					<outline text="console.log (&quot;processHomepageText: pagetable == &quot; + utils.jsonStringify (pagetable));" isComment="true"/>
					<outline text="console.log (&quot;processHomepageText: s == &quot; + s);" isComment="true"/>
					<outline text="" isComment="true"/>
					<outline text="pagetext = utils.multipleReplaceAll (s, pagetable, false, &quot;[%&quot;, &quot;%]&quot;);"/>
					<outline text="return (pagetext);"/>
					<outline text="}"/>
					</outline>
				<outline text="function formatDateTime (when) {">
					<outline text="if (when === undefined) {">
						<outline text="when = new Date ();"/>
						<outline text="}"/>
						</outline>
					<outline text="return (dateFormat (new Date (when), &quot;yyyy-mm-dd HH:MM:ss&quot;));"/>
					<outline text="}"/>
					</outline>
				<outline text="function encode (s) {">
					<outline text="return (mysql.escape (s));"/>
					<outline text="}"/>
					</outline>
				<outline text="function encodeValues (values) {">
					<outline text="var part1 = &quot;&quot;, part2 = &quot;&quot;;"/>
					<outline text="for (var x in values) { //generate something like this: (feedurl, title, htmlurl, description, whenupdated)">
						<outline text="if (part1.length &gt; 0) {">
							<outline text="part1 += &quot;, &quot;;"/>
							<outline text="}"/>
							</outline>
						<outline text="part1 += x;"/>
						<outline text="}"/>
						</outline>
					<outline text="for (var x in values) { //and this: ('http://scripting.com/rss.xml', Scripting News', 'http://scripting.com/', 'Even worse etc', '2018-02-04 12:04:08')">
						<outline text="if (part2.length &gt; 0) {">
							<outline text="part2 += &quot;, &quot;;"/>
							<outline text="}"/>
							</outline>
						<outline text="part2 += encode (values [x]);"/>
						<outline text="}"/>
						</outline>
					<outline text="return (&quot;(&quot; + part1 + &quot;) values (&quot; + part2 + &quot;);&quot;);"/>
					<outline text="}"/>
					</outline>
				<outline text="function runSqltext (s, callback) {">
					<outline text="theSqlConnectionPool.getConnection (function (err, connection) {">
						<outline text="if (err) {">
							<outline text="console.log (&quot;runSqltext: s == &quot; + s);"/>
							<outline text="console.log (&quot;runSqltext: err.code == &quot; + err.code + &quot;, err.message == &quot; + err.message);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="connection.query (s, function (err, result) {">
								<outline text="connection.release ();"/>
								<outline text="if (err) {">
									<outline text="console.log (&quot;runSqltext: s == &quot; + s);" isComment="true"/>
									<outline text="console.log (&quot;runSqltext: err.code == &quot; + err.code + &quot;, err.message == &quot; + err.message);"/>
									<outline text="if (callback !== undefined) {">
										<outline text="callback (undefined);"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="console.log (&quot;result == &quot; + utils.jsonStringify (result));" isComment="true"/>
									<outline text="if (callback !== undefined) {">
										<outline text="callback (result);"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function resetFeedSubCount (feedUrl, callback) { //set the ctSubs column for the indicated feed in the feeds table">
					<outline text="var sqltext = &quot;SELECT count(*) AS c FROM subscriptions WHERE feedUrl=&quot; + encode (feedUrl);"/>
					<outline text="runSqltext (sqltext, function (resultCount) {">
						<outline text="var firstLine = resultCount [0];"/>
						<outline text="sqltext = &quot;UPDATE feeds SET countSubs = &quot; + firstLine.c + &quot; WHERE feedUrl = &quot; + encode (feedUrl);"/>
						<outline text="console.log (&quot;resetFeedSubCount: sqltext == &quot; + sqltext);" isComment="true"/>
						<outline text="runSqltext (sqltext, function (resultUpdate) {">
							<outline text="if (callback !== undefined) {">
								<outline text="callback (resultUpdate);"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function addSubscriptionToDatabase (username, listname, feedurl, callback) {">
					<outline text="Changes" isComment="true">
						<outline text="12/4/20; 3:07:47 PM by DW">
							<outline text="Remove listname column."/>
							</outline>
						</outline>
					<outline text="console.log (&quot;addSubscriptionToDatabase: username == &quot; + username + &quot;, listname == &quot; + listname + &quot;, feedurl == &quot; + feedurl);" isComment="true"/>
					<outline text="var now = formatDateTime (new Date ());"/>
					<outline text="var sqltext = &quot;REPLACE INTO subscriptions (username, feedUrl, whenUpdated) VALUES (&quot; + encode (username) + &quot;, &quot; + encode (feedurl) + &quot;, &quot; + encode (now) + &quot;);&quot;;"/>
					<outline text="var sqltext = &quot;REPLACE INTO subscriptions (username, listname, feedUrl, whenUpdated) VALUES (&quot; + encode (username) + &quot;, &quot; + encode (listname) + &quot;, &quot; + encode (feedurl) + &quot;, &quot; + encode (now) + &quot;);&quot;;" isComment="true"/>
					<outline text="hotlistChanged ();"/>
					<outline text="runSqltext (sqltext, function (result) {">
						<outline text="resetFeedSubCount (feedurl, function (resetResult) {">
							<outline text="if (callback !== undefined) {">
								<outline text="callback (result);"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text=""/>
				<outline text="//the log">
					<outline text=""/>
					<outline text="var theLog = {">
						<outline text="whenLastSave: new Date (),"/>
						<outline text="whenLastRollover: new Date (),"/>
						<outline text="ctSaves: 0,"/>
						<outline text="logArray: new Array ()"/>
						<outline text="};"/>
						<outline text=""/>
						</outline>
					<outline text="var flLogChanged = false;"/>
					<outline text=""/>
					<outline text="function addToLog (username, what, feedUrl, callback) {">
						<outline text="console.log (&quot;addToLog: username == &quot; + username + &quot;, what == &quot; + what + &quot;, feedUrl == &quot; + feedUrl);"/>
						<outline text="theLog.logArray.unshift ({">
							<outline text="username: username,"/>
							<outline text="what: what,"/>
							<outline text="feedUrl: feedUrl,"/>
							<outline text="when: new Date ()"/>
							<outline text="});"/>
							</outline>
						<outline text="flLogChanged = true;"/>
						<outline text="stats.whenLastLogChange = new Date (); //3/28/18 by DW"/>
						<outline text="statsChanged ();"/>
						<outline text="}"/>
						</outline>
					<outline text="function writeLogIfChanged (callback) {">
						<outline text="function checkRollover () {" isComment="true">
							<outline text="var now = new Date ();"/>
							<outline text="if (!utils.sameDay (theLog.whenLastRollover, now)) { //rollover" created="Mon, 03 Feb 2014 18:45:55 GMT" pgfnum="36993">
								<outline text="theLog.whenLastRollover = now;"/>
								<outline text="theLog.logArray = new Array ();"/>
								<outline text="flLogChanged = true;"/>
								<outline text="}" created="Mon, 03 Feb 2014 18:46:08 GMT" pgfnum="36994"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="if (flLogChanged) {">
							<outline text="flLogChanged = false;"/>
							<outline text="theLog.whenLastSave = new Date ();"/>
							<outline text="theLog.ctSaves++;"/>
							<outline text="utils.sureFilePath (config.fnameLog, function () {">
								<outline text="var jsontext = utils.jsonStringify (theLog);"/>
								<outline text="fs.writeFile (config.fnameLog, jsontext, function (err) {">
									<outline text="var f = config.logsFolder + utils.getDatePath (undefined, false) + &quot;.json&quot;;"/>
									<outline text="utils.sureFilePath (f, function () {">
										<outline text="fs.writeFile (f, jsontext, function (err) {">
											<outline text="checkRollover ();" isComment="true"/>
											<outline text="});"/>
											</outline>
										<outline text="});"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function readCurrentLogFile (callback) {">
						<outline text="fs.readFile (config.fnameLog, function (err, jsontext) {">
							<outline text="if (!err) {">
								<outline text="var jstruct = JSON.parse (jsontext);"/>
								<outline text="for (var x in jstruct) {">
									<outline text="theLog [x] = jstruct [x];"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="if (callback !== undefined) {">
								<outline text="callback ();"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text=""/>
					<outline text=""/>
					<outline text="var logQueue = new Array ();" isComment="true"/>
					<outline text="var flPopRunning = false;" isComment="true"/>
					<outline text="" isComment="true"/>
					<outline text="function addToLog (username, what, feedUrl, callback) {" isComment="true">
						<outline text="console.log (&quot;addToLog: username == &quot; + username + &quot;, what == &quot; + what + &quot;, feedUrl == &quot; + feedUrl);"/>
						<outline text="logQueue.push ({">
							<outline text="username: username,"/>
							<outline text="what: what,"/>
							<outline text="feedUrl: feedUrl,"/>
							<outline text="when: new Date ()"/>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function addToLog (username, what, feedUrl, callback) {" isComment="true">
						<outline text="var now = formatDateTime (new Date ());"/>
						<outline text="var sqltext = &quot;REPLACE INTO log (username, what, feedUrl, whenadd) VALUES (&quot; + encode (username) + &quot;, &quot; + encode (what) + &quot;, &quot; + encode (feedUrl) + &quot;, &quot; + encode (now) + &quot;);&quot;;"/>
						<outline text="console.log (&quot;addToLog: sqltext == &quot; + sqltext);" isComment="true"/>
						<outline text="runSqltext (sqltext, function (result) {">
							<outline text="if (callback !== undefined) {">
								<outline text="callback (result);"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function startLogWatchThread () {" isComment="true">
						<outline text="function popLog () {">
							<outline text="if (!flPopRunning) {">
								<outline text="if (logQueue.length &gt; 0) {">
									<outline text="flPopRunning = true;"/>
									<outline text="var item = logQueue.shift ();"/>
									<outline text="var when = formatDateTime (item.when);"/>
									<outline text="console.log (&quot;popLog: item.username == &quot; + item.username + &quot;, item.what == &quot; + item.what + &quot;, item.feedUrl == &quot; + item.feedUrl);"/>
									<outline text="var sqltext = &quot;REPLACE INTO log (username, what, feedUrl, whenadd) VALUES (&quot; + encode (item.username) + &quot;, &quot; + encode (item.what) + &quot;, &quot; + encode (item.feedUrl) + &quot;, &quot; + encode (when) + &quot;);&quot;;"/>
									<outline text="runSqltext (sqltext, function (result) {">
										<outline text="flPopRunning = false;"/>
										<outline text="});"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="setInterval (popLog, 100); "/>
						<outline text="}"/>
						</outline>
					</outline>
				<outline text="//nightly backup -- 11/26/19 AM by DW">
					<outline text="function backupSubscriptions (callback) {">
						<outline text="var sqltext = &quot;select * from subscriptions;&quot;;"/>
						<outline text="runSqltext (sqltext, function (result) {">
							<outline text="var subs = new Array ();"/>
							<outline text="for (var i = 0; i &lt; result.length; i++) {">
								<outline text="subs.push (result [i]);"/>
								<outline text="}"/>
								</outline>
							<outline text="callback (subs);"/>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function backupFeeds (callback) {">
						<outline text="var sqltext = &quot;select * from feeds;&quot;;"/>
						<outline text="runSqltext (sqltext, function (result) {">
							<outline text="var feeds = new Array ();"/>
							<outline text="console.log (result.length);" isComment="true"/>
							<outline text="console.log (utils.jsonStringify (result [0]));" isComment="true"/>
							<outline text="for (var i = 0; i &lt; result.length; i++) {">
								<outline text="feeds.push (result [i]);"/>
								<outline text="}"/>
								</outline>
							<outline text="callback (feeds);"/>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function writeBackupFile (theData, fname, callback) {">
						<outline text="Changes" isComment="true">
							<outline text="11/26/19; 11:29:33 AM by DW">
								<outline text="Don't maintain a calendar-based archive of the tables. They are huge files. "/>
								</outline>
							</outline>
						<outline text="var f = config.backupFolder + fname;"/>
						<outline text="utils.sureFilePath (f, function () {">
							<outline text="var jsontext = utils.jsonStringify (theData);"/>
							<outline text="fs.writeFile (f, jsontext, function (err) {">
								<outline text="if (err) {">
									<outline text="console.log (&quot;writeBackupFile: f == &quot; + f + &quot;, err.message == &quot; + err.message);"/>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="console.log (&quot;writeBackupFile: f == &quot; + f);"/>
									<outline text="}"/>
									</outline>
								<outline text="if (callback !== undefined) {">
									<outline text="callback ();"/>
									<outline text="} "/>
									</outline>
								<outline text="" isComment="true"/>
								<outline text="" isComment="true"/>
								<outline text="" isComment="true"/>
								<outline text="var f = config.backupFolderPath + utils.getDatePath (undefined, true) + fname;" isComment="true"/>
								<outline text="utils.sureFilePath (f, function () {" isComment="true">
									<outline text="fs.writeFile (f, jsontext, function (err) {">
										<outline text="console.log (&quot;writeBackupFile: &quot; + fname + &quot; is &quot; + utils.megabyteString (jsontext.length));"/>
										<outline text="if (callback !== undefined) {">
											<outline text="callback ();"/>
											<outline text="}"/>
											</outline>
										<outline text="});"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function doBackup () {">
						<outline text="var whenstart = new Date ();"/>
						<outline text="backupFeeds (function (theFeeds) {">
							<outline text="console.log (&quot;doBackup: theFeeds.length == &quot; + theFeeds.length);"/>
							<outline text="writeBackupFile (theFeeds, &quot;feeds.json&quot;, function () {">
								<outline text="theFeeds = []; //reclaim memory used by the array"/>
								<outline text="backupSubscriptions (function (theSubs) {">
									<outline text="console.log (&quot;doBackup: theSubs.length == &quot; + theSubs.length);"/>
									<outline text="writeBackupFile (theSubs, &quot;subscriptions.json&quot;, function () {">
										<outline text="console.log (&quot;doBackup: backup took &quot; + utils.secondsSince (whenstart) + &quot; secs.&quot;);"/>
										<outline text="});"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					</outline>
				<outline text=""/>
				<outline text="function addFeedToDatabase (feedUrl, callback) {">
					<outline text="Changes" isComment="true">
						<outline text="3/9/18; 9:21:54 AM by DW">
							<outline text="We add the feed to the database even if there was an error."/>
							</outline>
						</outline>
					<outline text="var whenstart = new Date ();"/>
					<outline text="console.log (&quot;addFeedToDatabase: feedUrl == &quot; + feedUrl);" isComment="true"/>
					<outline text="getFeedInfoFromDatabase (feedUrl, function (err, values) {">
						<outline text="var flFeedWasInDatabase = false;"/>
						<outline text="if (err) {">
							<outline text="values = {">
								<outline text="feedUrl: feedUrl,"/>
								<outline text="ctChecks: 0,"/>
								<outline text="ctErrors: 0,"/>
								<outline text="ctConsecutiveErrors: 0"/>
								<outline text="};"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="flFeedWasInDatabase = true;"/>
							<outline text="}"/>
							</outline>
						<outline text="getFeedInfo (feedUrl, function (info, httpResponse) { //gets the info from the feed, on the net">
							<outline text="if (true) { //(flFeedWasInDatabase || (httpResponse.statusCode == 200)) {">
								<outline text="values.code = httpResponse.statusCode;"/>
								<outline text="values.whenUpdated = formatDateTime (whenstart);"/>
								<outline text="values.ctSecs = utils.secondsSince (whenstart);"/>
								<outline text="if (values.ctsecs !== undefined) {">
									<outline text="delete values.ctsecs;"/>
									<outline text="}"/>
									</outline>
								<outline text="values.ctChecks++;"/>
								<outline text="" isComment="true"/>
								<outline text="var values = {" isComment="true">
									<outline text="feedurl: feedUrl,"/>
									<outline text="whenupdated: formatDateTime (whenstart),"/>
									<outline text="code: 200,"/>
									<outline text="ctsecs: utils.secondsSince (whenstart)"/>
									<outline text="};"/>
									</outline>
								<outline text=""/>
								<outline text="function updateRecord (values, callback) {">
									<outline text="var sqltext = &quot;replace into feeds &quot; + encodeValues (values);"/>
									<outline text="console.log (&quot;Updating info for this feed: values == &quot; + utils.jsonStringify (values));" isComment="true"/>
									<outline text="stats.lastFeedUpdate = values;"/>
									<outline text="runSqltext (sqltext, function (result) {">
										<outline text="resetFeedSubCount (feedUrl, function () {">
											<outline text="if (callback !== undefined) {">
												<outline text="callback (values);"/>
												<outline text="}"/>
												</outline>
											<outline text="});"/>
											</outline>
										<outline text="});"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="if (info !== undefined) {">
									<outline text="values.title = utils.maxStringLength (info.title, config.maxLengthFeedTitle, true, true); "/>
									<outline text="values.htmlUrl = info.htmlUrl;"/>
									<outline text="values.description = utils.maxStringLength (info.description, config.maxLengthFeedDescription, true, true); "/>
									<outline text="values.ctConsecutiveErrors = 0;"/>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="values.ctErrors++;"/>
									<outline text="values.ctConsecutiveErrors++;"/>
									<outline text="values.whenLastError = values.whenUpdated;"/>
									<outline text="if (httpResponse !== undefined) { //2/4/18 by DW" isComment="true">
										<outline text="if (httpResponse.statusCode !== undefined) {">
											<outline text="values.code = httpResponse.statusCode;"/>
											<outline text="}"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="updateRecord (values, callback); "/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="callback ();"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function adjustHotlistCounts (theList) {">
					<outline text="var addCounts = new Object ();"/>
					<outline text="for (var i = theList.length - 1; i &gt;= 0; i--) {">
						<outline text="var item = theList [i], realUrl = config.duplicateUrlMap [item.feedUrl];"/>
						<outline text="if (realUrl !== undefined) {">
							<outline text="addCounts [realUrl] = item.countSubs;"/>
							<outline text="theList.splice (i, 1);"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="console.log (&quot;adjustHotlistCounts: addCounts == &quot; + utils.jsonStringify (addCounts));" isComment="true"/>
					<outline text="for (var i = 0; i &lt; theList.length; i++) { //4/8/18 by DW">
						<outline text="var item = theList [i];"/>
						<outline text="if (addCounts [item.feedUrl] !== undefined) {">
							<outline text="item.countSubs += addCounts [item.feedUrl];"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function getHotlist (callback) {">
					<outline text="const sqltext = &quot;SELECT subscriptions.feedUrl, feeds.title, feeds.htmlUrl, COUNT(subscriptions.feedUrl) AS countSubs FROM subscriptions, feeds WHERE subscriptions.feedUrl = feeds.feedUrl and feeds.title is not null GROUP BY feedUrl ORDER BY countSubs DESC LIMIT &quot; + config.ctHotlistItems + &quot;;&quot;;"/>
					<outline text="runSqltext (sqltext, function (result) {">
						<outline text="adjustHotlistCounts (result); //4/8/18 by DW"/>
						<outline text="callback (result);"/>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function updateHotlist (whenClientLastUpdate, callback) { //3/16/18 by DW">
					<outline text="var whenClient = new Date (whenClientLastUpdate);"/>
					<outline text="var whenServer = new Date (stats.whenLastHotlistChange);"/>
					<outline text="" isComment="true"/>
					<outline text="console.log (&quot;updateHotlist: whenClientLastUpdate == &quot; + whenClientLastUpdate);" isComment="true"/>
					<outline text="console.log (&quot;updateHotlist: whenClient == &quot; + whenClient);" isComment="true"/>
					<outline text="console.log (&quot;updateHotlist: whenServer == &quot; + whenServer);" isComment="true"/>
					<outline text="" isComment="true"/>
					<outline text="if (whenServer &gt; whenClient) {">
						<outline text="getHotlist (function (theHotlist) {">
							<outline text="var returnData = {">
								<outline text="hotlist: theHotlist,"/>
								<outline text="when: stats.whenLastHotlistChange"/>
								<outline text="};"/>
								<outline text=""/>
								</outline>
							<outline text="callback (returnData);"/>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="else {">
						<outline text="var returnData = {">
							<outline text="when: stats.whenLastHotlistChange"/>
							<outline text="};"/>
							<outline text=""/>
							</outline>
						<outline text="callback (returnData);"/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function updateLog (whenClientLastUpdate, callback) { //3/28/18 by DW">
					<outline text="var whenClient = new Date (whenClientLastUpdate);"/>
					<outline text="var whenServer = new Date (stats.whenLastLogChange);"/>
					<outline text="var returnData = {">
						<outline text="when: stats.whenLastLogChange"/>
						<outline text="};"/>
						</outline>
					<outline text="if (whenServer &gt; whenClient) {">
						<outline text="var ct = 100;"/>
						<outline text="if (theLog.logArray.length &lt; ct) {">
							<outline text="ct = theLog.logArray.length;"/>
							<outline text="}"/>
							</outline>
						<outline text="returnData.log = new Array ();"/>
						<outline text="for (var i = 0; i &lt; ct; i++) {">
							<outline text="returnData.log.push (theLog.logArray [i]);"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="callback (returnData);"/>
					<outline text="}"/>
					</outline>
				<outline text="function getKnownFeeds (callback) {">
					<outline text="var sqltext = &quot;select feedUrl from feeds where code = 200;&quot;;"/>
					<outline text="var sqltext = &quot;select distinct feedUrl from subscriptions;&quot;;" isComment="true"/>
					<outline text="runSqltext (sqltext, function (result) {">
						<outline text="var feeds = new Array ();"/>
						<outline text="for (var i = 0; i &lt; result.length; i++) {">
							<outline text="feeds.push (result [i].feedUrl);"/>
							<outline text="}"/>
							</outline>
						<outline text="callback (feeds);"/>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function getInfoAboutKnownFeeds (callback) {">
					<outline text="getKnownFeeds (function (theFeeds) {">
						<outline text="function doNextFeed (ix) {">
							<outline text="if (ix &lt; theFeeds.length) {">
								<outline text="addFeedToDatabase (theFeeds [ix], function () {">
									<outline text="doNextFeed (ix + 1);"/>
									<outline text="});"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="callback ();"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="doNextFeed (0);"/>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function deleteSubscriptions (username, callback) {">
					<outline text="var sqltext = &quot;delete from subscriptions where username = &quot; + encode (username) + &quot;;&quot;;"/>
					<outline text="console.log (&quot;deleteSubscriptions: sqltext == &quot; + sqltext);" isComment="true"/>
					<outline text="runSqltext (sqltext, function (result) {">
						<outline text="callback (result);"/>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function getUserSubscriptions (username, callback) {">
					<outline text="Changes" isComment="true">
						<outline text="12/4/20; 3:37:47 PM by DW">
							<outline text="Add s.categories to the values returned for each subscription. But only return categories if the value is non-null."/>
							</outline>
						<outline text="12/4/20; 3:09:13 PM by DW">
							<outline text="Remove listname."/>
							</outline>
						<outline text="4/24/18; 12:03:23 PM by DW">
							<outline text="Add listname to the data returned for each subscription."/>
							</outline>
						</outline>
					<outline text="var sqltext = &quot;SELECT s.feedUrl, f.title, f.htmlUrl, f.countSubs, s.categories FROM subscriptions AS s, feeds AS f WHERE s.feedUrl = f.feedUrl AND f.title is not null AND s.username = &quot; + encode (username) + &quot; ORDER BY s.whenUpdated DESC;&quot;;"/>
					<outline text="runSqltext (sqltext, function (result) {">
						<outline text="result.forEach (function (sub) {">
							<outline text="if (sub.categories == null) {">
								<outline text="delete sub.categories;"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="callback (result);"/>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function getOpmlFromArray (metadata, feedsArray) {">
					<outline text="Changes" isComment="true">
						<outline text="12/7/20; 10:50:12 AM by DW">
							<outline text="Replace three params, title, description, whenCreated, with an object, metadata."/>
							</outline>
						<outline text="12/6/20; 1:31:14 PM by DW">
							<outline text="Add optional description parameter. "/>
							</outline>
						</outline>
					<outline text="var opmltext = &quot;&quot;, indentlevel = 0, now = new Date ();"/>
					<outline text="function add (s) {">
						<outline text="opmltext += utils.filledString (&quot;\t&quot;, indentlevel) + s + &quot;\n&quot;;"/>
						<outline text="}"/>
						</outline>
					<outline text="function encode (s) {">
						<outline text="if ((s === undefined) || (s === null)) {">
							<outline text="return (&quot;&quot;);"/>
							<outline text="}"/>
							</outline>
						<outline text="return (utils.encodeXml (s));"/>
						<outline text="}"/>
						</outline>
					<outline text="add (&quot;&lt;?xml version=\&quot;1.0\&quot;?&gt;&quot;);"/>
					<outline text="add (&quot;&lt;!-- OPML generated by &quot; + myProductName + &quot; v&quot; + myVersion + &quot; on &quot; + now.toUTCString () + &quot; --&gt;&quot;);"/>
					<outline text="add (&quot;&lt;opml version=\&quot;2.0\&quot;&gt;&quot;); indentlevel++;"/>
					<outline text="//add head">
						<outline text="add (&quot;&lt;head&gt;&quot;); indentlevel++;"/>
						<outline text=""/>
						<outline text="if (metadata.dateCreated !== undefined) {">
							<outline text="metadata.dateCreated = new Date (metadata.dateCreated).toUTCString ();"/>
							<outline text="}"/>
							</outline>
						<outline text="for (var x in metadata) {">
							<outline text="if (x !== &quot;name&quot;) {">
								<outline text="var s = metadata [x];"/>
								<outline text="if (s.length &gt; 0) {">
									<outline text="add (&quot;&lt;&quot; + x + &quot;&gt;&quot; + encode (s) + &quot;&lt;/&quot; + x + &quot;&gt;&quot;);"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text=""/>
						<outline text="if (title !== undefined) {" isComment="true">
							<outline text="add (&quot;&lt;title&gt;&quot; + encode (title) + &quot;&lt;/title&gt;&quot;);"/>
							<outline text="}"/>
							</outline>
						<outline text="if (description !== undefined) {" isComment="true">
							<outline text="add (&quot;&lt;description&gt;&quot; + encode (description) + &quot;&lt;/description&gt;&quot;);"/>
							<outline text="}"/>
							</outline>
						<outline text="if (whenCreated !== undefined) {" isComment="true">
							<outline text="console.log (&quot;getOpmlFromArray: whenCreated == &quot; + whenCreated);" isComment="true"/>
							<outline text="add (&quot;&lt;dateCreated&gt;&quot; + new Date (whenCreated).toUTCString () + &quot;&lt;/dateCreated&gt;&quot;);"/>
							<outline text="}"/>
							</outline>
						<outline text="add (&quot;&lt;dateModified&gt;&quot; + now.toUTCString () + &quot;&lt;/dateModified&gt;&quot;);"/>
						<outline text="add (&quot;&lt;/head&gt;&quot;); indentlevel--;"/>
						</outline>
					<outline text="add (&quot;&lt;body&gt;&quot;); indentlevel++;"/>
					<outline text="//add the &lt;outline&gt; elements">
						<outline text="function att (name, val) {">
							<outline text="if ((val === undefined) || (val === null)) {">
								<outline text="return (&quot;&quot;);"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="return (&quot; &quot; + name + &quot;=\&quot;&quot; + utils.encodeXml (val) + &quot;\&quot;&quot;);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="function addOneSub (theSub) {">
							<outline text="" isComment="true"/>
							<outline text="console.log (&quot;addOneSub: theSub == &quot; + utils.jsonStringify (theSub));" isComment="true"/>
							<outline text="" isComment="true"/>
							<outline text="//there are two possible kinds of nodes here, we handle both -- 5/14/18 by DW"/>
							<outline text="if (theSub.feedUrl !== undefined) {">
								<outline text="add (&quot;&lt;outline type=\&quot;rss\&quot;&quot; + att (&quot;text&quot;, theSub.title) + att (&quot;xmlUrl&quot;, theSub.feedUrl) + att (&quot;htmlUrl&quot;, theSub.htmlUrl) +  &quot; /&gt;&quot;);"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="add (&quot;&lt;outline type=\&quot;rss\&quot;&quot; + att (&quot;text&quot;, theSub.title) + att (&quot;xmlUrl&quot;, theSub.xmlurl) + att (&quot;htmlUrl&quot;, theSub.htmlurl) +  &quot; /&gt;&quot;);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="function addSubs (subs) {">
							<outline text="for (var i = 0; i &lt; subs.length; i++) {">
								<outline text="var feed = subs [i];"/>
								<outline text="if (feed.subs !== undefined) {">
									<outline text="add (&quot;&lt;outline&quot; + att (&quot;text&quot;, feed.text) + &quot;&gt;&quot;); indentlevel++;"/>
									<outline text="addSubs (feed.subs);"/>
									<outline text="add (&quot;&lt;/outline&gt;&quot;); indentlevel--;"/>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="addOneSub (feed);"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="addSubs (feedsArray);"/>
						<outline text="for (i = 0; i &lt; feedsArray.length; i++) {" isComment="true">
							<outline text="var feed = feedsArray [i];"/>
							<outline text="if (feed.subs !== undefined) {">
								<outline text="add (&quot;&lt;outline &quot; + att (&quot;text&quot;, feed.title) + &quot;&gt;&quot;); indentlevel++;"/>
								<outline text="addSubs (feed.subs);"/>
								<outline text="add (&quot;&lt;/outline&gt;&quot;); indentlevel--;"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="addOneSub (feed);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						</outline>
					<outline text="add (&quot;&lt;/body&gt;&quot;); indentlevel--;"/>
					<outline text="add (&quot;&lt;/opml&gt;&quot;); indentlevel--;"/>
					<outline text="return (opmltext);"/>
					<outline text="}"/>
					</outline>
				<outline text="function getUserOpmlSubscriptions (username, catname, callback) {">
					<outline text="Changes" isComment="true">
						<outline text="12/5/20; 1:44:42 PM by DW">
							<outline text="New parameter, catname. If undefined, we output all of the users subscriptions. If it's specified, only those from the indicated category."/>
							</outline>
						</outline>
					<outline text="function findCat (theCats, catname) {">
						<outline text="var theCat = undefined;"/>
						<outline text="if (catname !== undefined) {">
							<outline text="console.log (&quot;findCat: theCats == &quot; + utils.jsonStringify (theCats) + &quot;, catname == &quot; + catname);"/>
							<outline text="theCats.forEach (function (item) {">
								<outline text="if (item.name.toLowerCase () == catname.toLowerCase ()) {">
									<outline text="theCat = item;"/>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="return (theCat);"/>
						<outline text="}"/>
						</outline>
					<outline text="console.log (&quot;getUserOpmlSubscriptions: username == &quot; + username + &quot;, catname == &quot; + catname);"/>
					<outline text="getPrefs (username, function (err, jstruct) {">
						<outline text="var now = new Date (), whenCreated;"/>
						<outline text="try {">
							<outline text="whenCreated = jstruct.prefs.whenFirstStartup;"/>
							<outline text="}"/>
							</outline>
						<outline text="catch (err) {">
							<outline text="whenCreated = now;"/>
							<outline text="}"/>
							</outline>
						<outline text="getUserSubscriptions (username, function (feedsArray) {">
							<outline text="var thisCatsFeeds;"/>
							<outline text="if (catname === undefined) {">
								<outline text="thisCatsFeeds = feedsArray;"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="thisCatsFeeds = new Array ();"/>
								<outline text="feedsArray.forEach (function (theFeed) {">
									<outline text="if (theFeed.categories !== undefined) {">
										<outline text="var splits = theFeed.categories.split (&quot;,&quot;);"/>
										<outline text="splits.forEach (function (s) {">
											<outline text="if (s.toLowerCase () == catname.toLowerCase ()) {">
												<outline text="thisCatsFeeds.push (theFeed);"/>
												<outline text="}"/>
												</outline>
											<outline text="});"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="var title;"/>
							<outline text="if (catname === undefined) {">
								<outline text="title = &quot;Subscriptions for &quot; + username;"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="title = username + &quot;: &quot; + catname + &quot; feeds.&quot;;"/>
								<outline text="}"/>
								</outline>
							<outline text="var description = &quot;&quot;;"/>
							<outline text="var metadata = {">
								<outline text="title,"/>
								<outline text="description,"/>
								<outline text="dateCreated: whenCreated"/>
								<outline text="};"/>
								</outline>
							<outline text="if (jstruct.prefs.categories !== undefined) { //12/6/20 by DW">
								<outline text="var thisCategory = findCat (jstruct.prefs.categories, catname);"/>
								<outline text="if (thisCategory !== undefined) {">
									<outline text="for (var x in thisCategory) {">
										<outline text="metadata [x] = thisCategory [x];"/>
										<outline text="}"/>
										</outline>
									<outline text="if (thisCategory.title !== undefined) {" isComment="true">
										<outline text="title = thisCategory.title;"/>
										<outline text="}"/>
										</outline>
									<outline text="if (thisCategory.description !== undefined) {" isComment="true">
										<outline text="description = thisCategory.description;"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="var opmltext = getOpmlFromArray (metadata, thisCatsFeeds);"/>
							<outline text="var opmltext = getOpmlFromArray (title, description, whenCreated, thisCatsFeeds);" isComment="true"/>
							<outline text="callback (undefined, opmltext);"/>
							<outline text="});"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function getUserOpmlUrl (username, catname) {">
					<outline text="var fname = &quot;main.opml&quot;;"/>
					<outline text="if (catname !== undefined) {">
						<outline text="fname = utils.innerCaseName (catname) + &quot;.opml&quot;;"/>
						<outline text="}"/>
						</outline>
					<outline text="return (config.opmlS3url + username + &quot;/&quot; + fname);"/>
					<outline text="return (config.opmlS3url + username + &quot;/main.opml&quot;);" isComment="true"/>
					<outline text="}"/>
					</outline>
				<outline text="function getUserRecommendations (username, callback) { //3/30/19 by DW">
					<outline text="var sqltext = &quot;select distinct f1.countSubs, f1.title, f1.feedUrl, f1.htmlUrl from subscriptions s1,  subscriptions s2, subscriptions s3, feeds f1 where s1.feedUrl = s2.feedUrl and s1.username = &quot; + encode (username) + &quot; and s1.username != s2.username and s2.username = s3.username and s3.feedUrl = f1.feedUrl and s3.feedUrl not in (select feedUrl from subscriptions where username = &quot;  + encode (username) + &quot;) order by f1.countSubs DESC, f1.title limit 20;&quot;;"/>
					<outline text="console.log (&quot;getUserRecommendations: sqltext == &quot; + sqltext);"/>
					<outline text="runSqltext (sqltext, function (result) {">
						<outline text="callback (undefined, result);"/>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function uploadUserOpmlToS3 (username, callback) { //2/28/18 by DW">
					<outline text="Changes" isComment="true">
						<outline text="12/5/20; 12:06:41 PM by DW">
							<outline text="This gets more complicated now that we have categories. "/>
							</outline>
						<outline text="3/13/18; 11:20:16 AM by DW">
							<outline text="Write the file out to the local disk as well as S3."/>
							</outline>
						</outline>
					<outline text="getPrefs (username, function (err, jstruct) {">
						<outline text="var theCategories = jstruct.prefs.categories;"/>
						<outline text="console.log (&quot;uploadUserOpmlToS3: theCategories == &quot; + utils.jsonStringify (theCategories));"/>
						<outline text="function uploadOne (theCategory, callback) {">
							<outline text="var catname, fname;"/>
							<outline text="if (theCategory === undefined) {">
								<outline text="catname = undefined;"/>
								<outline text="fname = &quot;main.opml&quot;;"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="catname = theCategory.name;"/>
								<outline text="fname = utils.innerCaseName (catname) + &quot;.opml&quot;;"/>
								<outline text="}"/>
								</outline>
							<outline text="getUserOpmlSubscriptions (username, catname, function (err, opmltext) {">
								<outline text="if (err) {">
									<outline text="callback (err);"/>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="var path = config.opmlS3path + username + &quot;/&quot; + fname;"/>
									<outline text="s3.newObject (path, opmltext, &quot;text/xml&quot;, &quot;public-read&quot;, function (err, data) {">
										<outline text="console.log (&quot;uploadUserOpmlToS3: url == http:/&quot; + path);"/>
										<outline text="var f = config.usersFolder + username + &quot;/&quot; + fname; //3/13/18 by DW"/>
										<outline text="var f = config.usersFolder + username + &quot;/&quot; + config.fnameS3backup; //3/13/18 by DW" isComment="true"/>
										<outline text="utils.sureFilePath (f, function () {">
											<outline text="fs.writeFile (f, opmltext, function (err) {">
												<outline text="console.log (&quot;uploadUserOpmlToS3: f == &quot; + f);" isComment="true"/>
												<outline text="});"/>
												</outline>
											<outline text="});"/>
											</outline>
										<outline text="callback (undefined, getUserOpmlUrl (username, catname));"/>
										<outline text="});"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="uploadOne (undefined, function (err, opmlUrl) { //upload the main file">
							<outline text="if (err) {">
								<outline text="callback (err);"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="if (theCategories === undefined) { //this user has no categories">
									<outline text="callback (undefined, {opmlUrl});"/>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="var ix = 0, arrayOfUrls = [opmlUrl];"/>
									<outline text="function uploadNext (ix) {">
										<outline text="if (ix &lt; theCategories.length) {">
											<outline text="uploadOne (theCategories [ix], function (err, opmlUrl) { //upload the opml file for the category">
												<outline text="if (!err) {">
													<outline text="arrayOfUrls.push (opmlUrl);"/>
													<outline text="}"/>
													</outline>
												<outline text="uploadNext (ix + 1);"/>
												<outline text="});"/>
												</outline>
											<outline text="}"/>
											</outline>
										<outline text="else {">
											<outline text="callback (undefined, arrayOfUrls);"/>
											<outline text="}"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="uploadNext (0);"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="getUserOpmlSubscriptions (username, function (err, opmltext) {" isComment="true">
							<outline text="if (err) {">
								<outline text="if (callback !== undefined) {">
									<outline text="callback (err);"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="var path = config.opmlS3path + username + &quot;/main.opml&quot;;"/>
								<outline text="s3.newObject (path, opmltext, &quot;text/xml&quot;, &quot;public-read&quot;, function (err, data) {">
									<outline text="console.log (&quot;uploadUserOpmlToS3: url == http:/&quot; + path);"/>
									<outline text=""/>
									<outline text="var f = config.usersFolder + username + &quot;/&quot; + config.fnameS3backup; //3/13/18 by DW"/>
									<outline text="utils.sureFilePath (f, function () {">
										<outline text="fs.writeFile (f, opmltext, function (err) {">
											<outline text="console.log (&quot;uploadUserOpmlToS3: f == &quot; + f);" isComment="true"/>
											<outline text="});"/>
											</outline>
										<outline text="});"/>
										</outline>
									<outline text=""/>
									<outline text="if (callback !== undefined) {">
										<outline text="var jstruct = {">
											<outline text="opmlUrl: getUserOpmlUrl (username)"/>
											<outline text="};"/>
											</outline>
										<outline text="callback (undefined, jstruct);"/>
										<outline text="}"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function uploadHotlistToS3 (callback) { //3/22/18 by DW">
					<outline text="getHotlist (function (theHotlist) {">
						<outline text="var metadata = {">
							<outline text="title: config.hotlistTitle,"/>
							<outline text="description: undefined,"/>
							<outline text="dateCreated: config.whenHotlistCreated"/>
							<outline text="};"/>
							</outline>
						<outline text="var opmltext = getOpmlFromArray (metadata, theHotlist);"/>
						<outline text="var opmltext = getOpmlFromArray (config.hotlistTitle, undefined, config.whenHotlistCreated, theHotlist);" isComment="true"/>
						<outline text="var path = config.opmlS3path + config.s3HotlistPath;"/>
						<outline text="s3.newObject (path, opmltext, &quot;text/xml&quot;, &quot;public-read&quot;, function (err, data) {">
							<outline text="callback ();"/>
							<outline text="});"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function getFeedInfoFromDatabase (feedUrl, callback) { //as opposed to getting it from the feed itself">
					<outline text="var sqltext = &quot;SELECT * FROM feeds WHERE feedUrl=&quot; + encode (feedUrl) + &quot;;&quot;;"/>
					<outline text="console.log (&quot;getFeedInfoFromDatabase: sqltext == &quot; + sqltext);" isComment="true"/>
					<outline text="runSqltext (sqltext, function (result) {">
						<outline text="if (result.length == 0) {">
							<outline text="callback ({message: &quot;Can't get the info for the feed \&quot;&quot; + feedUrl + &quot;\&quot; because it is not in the database.&quot;});"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="callback (undefined, result [0]);"/>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function getUsersWhoFollowFeed (feedUrl, callback) {">
					<outline text="var sqltext = &quot;select username from subscriptions where feedUrl=&quot; + encode (feedUrl) + &quot;;&quot;;"/>
					<outline text="runSqltext (sqltext, function (result) {">
						<outline text="var userarray = new Array ();"/>
						<outline text="if (result !== undefined) { //4/17/18 by DW">
							<outline text="for (var i = 0; i &lt; result.length; i++) {">
								<outline text="userarray.push (result [i].username);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="callback (userarray);"/>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function updateOneFeed (feedUrl, callback) {">
					<outline text="addFeedToDatabase (feedUrl, function (addResult) {">
						<outline text="saveFeedInfoJson (feedUrl, function () {">
							<outline text="if (callback !== undefined) {">
								<outline text="callback (addResult);"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function updateLeastRecentlyUpdatedFeed (callback) {">
					<outline text="var sqltext = &quot;SELECT * FROM feeds ORDER BY whenUpdated ASC LIMIT 1;&quot;;"/>
					<outline text="runSqltext (sqltext, function (result) {">
						<outline text="if (result.length &gt; 0) { //3/7/18 by DW">
							<outline text="var theFeed = result [0];"/>
							<outline text="var secsSinceUpdate = utils.secondsSince (theFeed.whenUpdated);"/>
							<outline text="if (secsSinceUpdate &gt;= config.minSecsBetwSingleFeedUpdate) {">
								<outline text="console.log (&quot;Updating &quot; + theFeed.feedUrl + &quot;, last updated &quot; + (secsSinceUpdate / 3600).toFixed (2) + &quot; hours ago.&quot;);" isComment="true"/>
								<outline text="flOneConsoleMsgInLastMinute = true;" isComment="true"/>
								<outline text="updateOneFeed (theFeed.feedUrl, callback);"/>
								<outline text="addFeedToDatabase (theFeed.feedUrl, function (addResult) {" isComment="true">
									<outline text="saveFeedInfoJson (theFeed.feedUrl, function () {">
										<outline text="if (callback !== undefined) {">
											<outline text="callback (result);"/>
											<outline text="}"/>
											</outline>
										<outline text="});"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function updateThisFeed (feedUrl, callback) { //handle a ping call">
					<outline text="getFeedInfoFromDatabase (feedUrl, function (err, info) {">
						<outline text="if (err) { //4/2/18 by DW">
							<outline text="if (callback !== undefined) {">
								<outline text="callback (err.message);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="if (info.feedUrl !== undefined) { //it's one of our feeds">
								<outline text="addFeedToDatabase (feedUrl, function (addResult) {">
									<outline text="if (callback !== undefined) {">
										<outline text="callback (info);"/>
										<outline text="}"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="if (callback !== undefined) {">
									<outline text="callback (info);"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function resetAllSubCounts (callback) {">
					<outline text="getKnownFeeds (function (theFeeds) {">
						<outline text="function doNextFeed (ix) {">
							<outline text="if (ix &lt; theFeeds.length) {">
								<outline text="resetFeedSubCount (theFeeds [ix], function () {">
									<outline text="doNextFeed (ix + 1);"/>
									<outline text="});"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="if (callback !== undefined) {">
									<outline text="callback ();"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="doNextFeed (0);"/>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function readFeed (feedUrl, callback) {" isComment="true">
					<outline text="Changes" isComment="true">
						<outline text="2/4/18; 12:27:56 PM by DW">
							<outline text="On error, return the response object as the second param to the callback."/>
							</outline>
						<outline text="1/26/18; 10:27:21 AM by DW">
							<outline text="Cribbed from davereader."/>
							</outline>
						</outline>
					<outline text="try {">
						<outline text="var requestOptions = {">
							<outline text="url: feedUrl,"/>
							<outline text="timeout: config.requestTimeoutSecs * 1000"/>
							<outline text="};"/>
							</outline>
						<outline text="var req = request (requestOptions);"/>
						<outline text="var feedparser = new feedParser ();"/>
						<outline text="var feedItems = new Array ();"/>
						<outline text="req.on (&quot;response&quot;, function (response) {">
							<outline text="var stream = this;"/>
							<outline text="if (response.statusCode == 200) {">
								<outline text="stream.pipe (feedparser);"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="console.log (&quot;readFeed error #1: feedUrl == &quot; + feedUrl + &quot;, response.statusCode == &quot; + response.statusCode);"/>
								<outline text="callback (undefined, response);"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="req.on (&quot;error&quot;, function (err) {">
							<outline text="var response = {">
								<outline text="statusCode: 400 //something like ENOTFOUND or ETIMEDOUT"/>
								<outline text="};"/>
								</outline>
							<outline text="console.log (&quot;readFeed error #2: feedUrl == &quot; + feedUrl + &quot; err.code == &quot; + err.code);"/>
							<outline text="callback (undefined, response);"/>
							<outline text="});"/>
							</outline>
						<outline text="feedparser.on (&quot;readable&quot;, function () {">
							<outline text="try {">
								<outline text="var item = this.read (), flnew;"/>
								<outline text="if (item !== null) {">
									<outline text="feedItems.push (item);"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="catch (err) {">
								<outline text="console.log (&quot;readFeed: error == &quot; + err.message);"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="feedparser.on (&quot;error&quot;, function () {">
							<outline text="});"/>
							</outline>
						<outline text="feedparser.on (&quot;end&quot;, function () {">
							<outline text="var response = {">
								<outline text="statusCode: 200 "/>
								<outline text="};"/>
								</outline>
							<outline text="callback (feedItems, response);"/>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="catch (err) {">
						<outline text="var response = {">
							<outline text="statusCode: 400 //something like ENOTFOUND or ETIMEDOUT"/>
							<outline text="};"/>
							</outline>
						<outline text="console.log (&quot;readFeed: err.message == &quot; + err.message);"/>
						<outline text="callback (undefined, response);"/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function getFeedInfo (feedUrl, callback) {">
					<outline text="feedRead.parseUrl (feedUrl, config.requestTimeoutSecs, function (err, theFeed, httpResponse) {">
						<outline text=""/>
						<outline text="if (httpResponse === undefined) {">
							<outline text="console.log (&quot;getFeedInfo: httpResponse is undefined, feedUrl == &quot; + feedUrl);"/>
							<outline text="httpResponse = { //should not be needed">
								<outline text="statusCode: 400"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text=""/>
						<outline text="if (err) {">
							<outline text="callback (undefined, httpResponse);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="var info = {">
								<outline text="title: theFeed.head.title,"/>
								<outline text="htmlUrl: theFeed.head.link,"/>
								<outline text="description: theFeed.head.description"/>
								<outline text="}"/>
								</outline>
							<outline text="console.log (&quot;getFeedInfo: theFeed == &quot; + utils.jsonStringify (theFeed));" isComment="true"/>
							<outline text="callback (info, httpResponse);"/>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="old code" isComment="true">
						<outline text="" isComment="true"/>
						<outline text="" isComment="true"/>
						<outline text="readFeed (feedUrl, function (feedItems, httpResponse) {" isComment="true">
							<outline text="console.log (&quot;getFeedInfo: feedItems == &quot; + utils.jsonStringify (feedItems));" isComment="true"/>
							<outline text="console.log (&quot;getFeedInfo: httpResponse == &quot; + utils.jsonStringify (httpResponse));" isComment="true"/>
							<outline text="if ((feedItems === undefined) || (feedItems.length == 0)) {">
								<outline text="callback (undefined, httpResponse);"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="var item = feedItems [0];"/>
								<outline text="var info = {">
									<outline text="title: item.meta.title,"/>
									<outline text="htmlUrl: item.meta.link,"/>
									<outline text="description: item.meta.description"/>
									<outline text="}"/>
									</outline>
								<outline text="callback (info, httpResponse);"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function readFeedIncludeEverything (feedUrl, callback) { ">
					<outline text="feedRead.parseUrl (feedUrl, config.requestTimeoutSecs, function (err, theFeed, httpResponse) {">
						<outline text="if (err) {">
							<outline text="callback (undefined, httpResponse);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="console.log (&quot;readFeedIncludeEverything: theFeed == &quot; + utils.jsonStringify (theFeed));" isComment="true"/>
							<outline text="function ifNotNull (val) {">
								<outline text="if (val === null) {">
									<outline text="return (undefined);"/>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="return (val);"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="var returnedFeed = {">
								<outline text="head: theFeed.head,"/>
								<outline text="items: []"/>
								<outline text="};"/>
								</outline>
							<outline text="theFeed.items.forEach (function (item) {">
								<outline text="var returnedItem = {">
									<outline text="title: ifNotNull (item.title),"/>
									<outline text="link: ifNotNull (item.link),"/>
									<outline text="description: ifNotNull (item.description),"/>
									<outline text="pubDate: ifNotNull (item.pubDate),"/>
									<outline text="guid: ifNotNull (item.guid),"/>
									<outline text="author: ifNotNull (item.author),"/>
									<outline text="permalink: ifNotNull (item.permalink)"/>
									<outline text="};"/>
									</outline>
								<outline text="if (item.enclosures.length &gt; 0) {">
									<outline text="returnedItem.enclosure = item.enclosures [0];"/>
									<outline text="}"/>
									</outline>
								<outline text="if (item.categories.length &gt; 0) {">
									<outline text="returnedItem.categories = item.categories;"/>
									<outline text="}"/>
									</outline>
								<outline text="returnedFeed.items.push (returnedItem);"/>
								<outline text="});"/>
								</outline>
							<outline text="callback (undefined, returnedFeed);"/>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function saveFeedInfoJson (feedUrl, callback) {">
					<outline text="getFeedInfoFromDatabase (feedUrl, function (err, feedInfo) {">
						<outline text="var f = config.savedFeedInfoFolder + hashMD5 (feedUrl) + &quot;/&quot; + config.fnameFeedInfo;"/>
						<outline text="utils.sureFilePath (f, function () {">
							<outline text="fs.writeFile (f, utils.jsonStringify (feedInfo), function (err) {">
								<outline text="if (callback !== undefined) {">
									<outline text="callback ();"/>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function readOpmlSubscriptionList (f, flExpandIncludes, callback) { //read OPML file, parse, call back with a list of feeds contained in the file">
					<outline text="Changes" isComment="true">
						<outline text="3/13/18; 5:54:53 PM by DW">
							<outline text="Add code to read structured OPML files. "/>
							</outline>
						</outline>
					<outline text="opml.readOpmlFile (f, function (theOutline) {">
						<outline text="if (theOutline !== undefined) {">
							<outline text="var feedlist = new Array ();"/>
							<outline text="function getFeeds (theOutline) {">
								<outline text="if (theOutline.subs !== undefined) {">
									<outline text="for (var i = 0; i &lt; theOutline.subs.length; i++) {">
										<outline text="var node = theOutline.subs [i];"/>
										<outline text="if (node.xmlurl !== undefined) {">
											<outline text="feedlist.push (node.xmlurl);"/>
											<outline text="}"/>
											</outline>
										<outline text="else {">
											<outline text="getFeeds (node);"/>
											<outline text="}"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="getFeeds (theOutline);"/>
							<outline text="if (theOutline.subs !== undefined) {" isComment="true">
								<outline text="for (var i = 0; i &lt; theOutline.subs.length; i++) {">
									<outline text="var feed = theOutline.subs [i];"/>
									<outline text="if (feed.xmlurl !== undefined) {">
										<outline text="feedlist.push (feed.xmlurl);"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="callback (feedlist);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="callback (undefined);"/>
							<outline text="}"/>
							</outline>
						<outline text="}, flExpandIncludes);"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function processListOfLists (screenname, opmltext, callback) { //5/14/18 by DW">
					<outline text="const flExpandIncludes = false;"/>
					<outline text="function saveFile (fname, subs, callback) {">
						<outline text="var metadata = {">
							<outline text="title: fname"/>
							<outline text="};"/>
							</outline>
						<outline text="var opmltext = getOpmlFromArray (metadata, subs);"/>
						<outline text="var opmltext = getOpmlFromArray (fname, undefined, undefined, subs);" isComment="true"/>
						<outline text="console.log (&quot;saveFile: fname == &quot; + fname + &quot;, opmltext == &quot; + opmltext);" isComment="true"/>
						<outline text="var path = config.opmlS3path + screenname + &quot;/&quot; + fname;"/>
						<outline text="s3.newObject (path, opmltext, &quot;text/xml&quot;, &quot;public-read&quot;, function (err, data) {">
							<outline text="console.log (&quot;processListOfLists: url == http:/&quot; + path);"/>
							<outline text="var f = config.usersFolder + screenname + &quot;/&quot; + fname; "/>
							<outline text="utils.sureFilePath (f, function () {">
								<outline text="fs.writeFile (f, opmltext, function (err) {">
									<outline text="if (callback !== undefined) {">
										<outline text="callback ();"/>
										<outline text="}"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="opml.readOpmlString (opmltext, function (theOutline) {">
						<outline text="var filelist = new Array ();"/>
						<outline text="if (theOutline !== undefined) {">
							<outline text="if (theOutline.subs !== undefined) {">
								<outline text="for (var i = 0; i &lt; theOutline.subs.length; i++) {">
									<outline text="var node = theOutline.subs [i];"/>
									<outline text="if (node.xmlurl === undefined) { //it's not a subscription">
										<outline text="if (utils.endsWith (node.text, &quot;.opml&quot;)) {">
											<outline text="filelist.push (node.text);"/>
											<outline text="saveFile (node.text, node.subs);"/>
											<outline text="}"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="callback (undefined, filelist);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="callback ({message: &quot;Error processing the OPML text.&quot;});"/>
							<outline text="}"/>
							</outline>
						<outline text="}, flExpandIncludes);"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function subscribeToFeed (screenname, fname, feedUrl, callback) {">
					<outline text="Changes" isComment="true">
						<outline text="12/4/20; 3:11:02 PM by DW">
							<outline text="Forget about listname."/>
							</outline>
						<outline text="5/14/18; 2:44:39 PM by DW">
							<outline text="No matter what the caller supplies as the listname (fname parameter) we use the default. "/>
							</outline>
						<outline text="5/14/18; 12:08:05 PM by DW">
							<outline text="If we deref each url before seeing if it's in the database, that increases the time to subscribe by a huge amount, if we already have the feed in the database. So we check first, before dereferencing the url. Makes the code more complex, but should run faster."/>
							</outline>
						</outline>
					<outline text="if (true) { //(fname === undefined) {" isComment="true">
						<outline text="fname = config.defaultListName;"/>
						<outline text="}"/>
						</outline>
					<outline text="getFeedInfoFromDatabase (feedUrl, function (err, info) {">
						<outline text="if (err) {  //not in database">
							<outline text="derefUrl (feedUrl, function (err, newUrl) { ">
								<outline text="if (!err) {">
									<outline text="feedUrl = newUrl;"/>
									<outline text="}"/>
									</outline>
								<outline text="console.log (&quot;subscribeToFeed: newUrl == &quot; + newUrl);"/>
								<outline text="getFeedInfoFromDatabase (feedUrl, function (err, info) {">
									<outline text="if (err) { //not in database">
										<outline text="addFeedToDatabase (feedUrl, function (addResult) {">
											<outline text="addToLog (screenname, &quot;new feed&quot;, feedUrl);"/>
											<outline text="addSubscriptionToDatabase (screenname, undefined, feedUrl, function (result) {">
												<outline text="callback (result);"/>
												<outline text="});"/>
												</outline>
											<outline text="});"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="else {">
										<outline text="addSubscriptionToDatabase (screenname, undefined, feedUrl, function (result) {">
											<outline text="callback (result);"/>
											<outline text="});"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="addSubscriptionToDatabase (screenname, undefined, feedUrl, function (result) {">
								<outline text="callback (result);"/>
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function processOpmlFile (f, screenname, callback) { //what we do when the user submits an OPML file">
					<outline text="Changes" isComment="true">
						<outline text="3/19/18; 5:57:52 PM by DW">
							<outline text="If httpResponse is not undefined, send progress messages back to the client while we're doing the processing."/>
							</outline>
						</outline>
					<outline text="readOpmlSubscriptionList (f, false, function (feedlist) {">
						<outline text="if (feedlist !== undefined) {">
							<outline text="var fname = utils.stringLastField (f, &quot;/&quot;);"/>
							<outline text="function doNextFeed (ix) {">
								<outline text="if (ix &lt; feedlist.length) {">
									<outline text="var feedUrl = feedlist [ix];"/>
									<outline text="subscribeToFeed (screenname, fname, feedUrl, function () {">
										<outline text="doNextFeed (ix + 1);"/>
										<outline text="});"/>
										</outline>
									<outline text="" isComment="true"/>
									<outline text="" isComment="true"/>
									<outline text="derefUrl (feedUrl, function (err, newUrl) { //4/1/18 by DW" isComment="true">
										<outline text="if (!err) {">
											<outline text="feedUrl = newUrl;"/>
											<outline text="}"/>
											</outline>
										<outline text="getFeedInfoFromDatabase (feedUrl, function (err, info) {">
											<outline text="if (err) { //not in database">
												<outline text="addFeedToDatabase (feedUrl, function (addResult) {">
													<outline text="addToLog (screenname, &quot;new feed&quot;, feedUrl);"/>
													<outline text="addSubscriptionToDatabase (screenname, fname, feedUrl, function () {">
														<outline text="doNextFeed (ix + 1);"/>
														<outline text="});"/>
														</outline>
													<outline text="});"/>
													</outline>
												<outline text="}"/>
												</outline>
											<outline text="else {">
												<outline text="addSubscriptionToDatabase (screenname, fname, feedUrl, function () {">
													<outline text="doNextFeed (ix + 1);"/>
													<outline text="});"/>
													</outline>
												<outline text="}"/>
												</outline>
											<outline text="});"/>
											</outline>
										<outline text="});"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="callback (undefined); //no error"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="doNextFeed (0);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="callback ({message: &quot;Can't process the subscription list because it is not a valid OPML file.&quot;});"/>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function importUserFolder (username, callback) {">
					<outline text="var userfolder = config.outlineImportFolder + username;"/>
					<outline text="console.log (&quot;importUserFolder: username == &quot; + username);"/>
					<outline text="if (isFolder (userfolder)) {">
						<outline text="console.log (userfolder);"/>
						<outline text="fs.readdir (userfolder, function (err, filelist) {">
							<outline text="if (err) {">
								<outline text="console.log (&quot;importOpmlFiles: err.message == &quot; + err.message);"/>
								<outline text="if (callback !== undefined) {">
									<outline text="callback ();"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="function processNextFile (ix) {">
									<outline text="if (ix &lt; filelist.length) {">
										<outline text="var fname = filelist [ix], f = userfolder + &quot;/&quot; + fname;"/>
										<outline text="console.log (&quot;importUserFolder: f == &quot; + f);"/>
										<outline text="processOpmlFile (f, username, function () {">
											<outline text="processNextFile (ix + 1);"/>
											<outline text="});"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="else {">
										<outline text="if (callback !== undefined) {">
											<outline text="callback ();"/>
											<outline text="}"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="processNextFile (0);"/>
								<outline text="for (var i = 0; i &lt; filelist.length; i++) {" isComment="true">
									<outline text="let fname = filelist [i], f = userfolder + &quot;/&quot; + fname;"/>
									<outline text=""/>
									<outline text="processOpmlFile (f, username, function () {">
										<outline text="});"/>
										</outline>
									<outline text=""/>
									<outline text="readOpmlSubscriptionList (f, false, function (feedlist) {">
										<outline text="if (feedlist !== undefined) {">
											<outline text="for (var j = 0; j &lt; feedlist.length; j++) {">
												<outline text="let urlfeed = feedlist [j];"/>
												<outline text="addSubscriptionToDatabase (username, fname, urlfeed);"/>
												<outline text="}"/>
												</outline>
											<outline text="}"/>
											</outline>
										<outline text="});"/>
										</outline>
									<outline text="console.log (&quot;\t&quot; + f);" isComment="true"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function importOpmlFiles (callback) { //imports outlines from the previous version of SYO">
					<outline text="function isFolder (f) {" isComment="true">
						<outline text="return (fs.lstatSync (f).isDirectory ());"/>
						<outline text="}"/>
						</outline>
					<outline text="fs.readdir (config.outlineImportFolder, function (err, userlist) {">
						<outline text="if (err) {">
							<outline text="console.log (&quot;importOpmlFiles: err.message == &quot; + err.message);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="for (var i = 0; i &lt; userlist.length; i++) {">
								<outline text="importUserFolder (userlist [i]);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="if (callback !== undefined) {">
							<outline text="callback ();"/>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function logSubscribe (screenname, feedUrl) {">
					<outline text="isSubscribed (screenname, feedUrl, function (flSubscribed) {">
						<outline text="if (!flSubscribed) {">
							<outline text="addToLog (screenname, &quot;subscribe&quot;, feedUrl);"/>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function logUnsubscribe (screenname, feedUrl) {">
					<outline text="isSubscribed (screenname, feedUrl, function (flSubscribed) {">
						<outline text="if (flSubscribed) {">
							<outline text="addToLog (screenname, &quot;unsubscribe&quot;, feedUrl);"/>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function subscribe (screenname, feedUrl, callback) {">
					<outline text="console.log (&quot;subscribe: screenname == &quot; + screenname + &quot;, feedUrl == &quot; + feedUrl);"/>
					<outline text="subscribeToFeed (screenname, undefined, feedUrl, function () {">
						<outline text="resetFeedSubCount (feedUrl, function () {">
							<outline text="if (callback !== undefined) {">
								<outline text="callback ();"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function unsubscribe (screenname, feedUrl, callback) {">
					<outline text="var sqltext = &quot;delete from subscriptions where username = &quot; + encode (screenname) + &quot; and feedUrl = &quot; + encode (feedUrl) + &quot;;&quot;;"/>
					<outline text="console.log (&quot;unsubscribe: sqltext == &quot; + sqltext);" isComment="true"/>
					<outline text="hotlistChanged ();"/>
					<outline text="logUnsubscribe (screenname, feedUrl);"/>
					<outline text="runSqltext (sqltext, function (result) {">
						<outline text="resetFeedSubCount (feedUrl, function () {">
							<outline text="if (callback !== undefined) {">
								<outline text="callback (result);"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function getSubscription (screenname, feedUrl, callback) { //12/4/20 PM by DW -- xxx">
					<outline text="Changes" isComment="true">
						<outline text="12/4/20; 11:32:37 AM by DW">
							<outline text="Created. If the user is not subscribed to the feed, we return an empty object. The caller can test for the presence of username, if it's not there, then the user isn't subscribed to the feed. Don't want to return an error, because it isn't an error to ask if the user is subscribed to a feed, and if so give me the info. "/>
							</outline>
						</outline>
					<outline text="const sqltext = &quot;select * from subscriptions where username = &quot; + encode (screenname) + &quot; and feedurl = &quot; + encode (feedUrl) + &quot;;&quot;;"/>
					<outline text="runSqltext (sqltext, function (result) {">
						<outline text="var theSubscription;"/>
						<outline text="if (result.length == 0) {">
							<outline text="theSubscription = new Object (); //empty"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="theSubscription = result [0];"/>
							<outline text="if (theSubscription.categories == null) {">
								<outline text="delete theSubscription.categories;"/>
								<outline text="}"/>
								</outline>
							<outline text="if (theSubscription.listname !== undefined) { //evolving away from this, don't show through the api">
								<outline text="delete theSubscription.listname;"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="callback (undefined, theSubscription);"/>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function setCategoriesForSubscription (screenname, feedUrl, catstring, callback) { //12/3/20 PM by DW -- xxx">
					<outline text="const sqltext = &quot;select * from subscriptions where username = &quot; + encode (screenname) + &quot; and feedurl = &quot; + encode (feedUrl) + &quot;;&quot;;"/>
					<outline text="runSqltext (sqltext, function (result) {">
						<outline text="var theSubscription = result [0];"/>
						<outline text="if (theSubscription === undefined) {">
							<outline text="callback ({message: &quot;Can't set the categories because the user isn't subscribed to the feed.&quot;});"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="theSubscription.categories = catstring;"/>
							<outline text="const sqltext = &quot;replace into subscriptions &quot; + encodeValues (theSubscription);"/>
							<outline text="runSqltext (sqltext, function (result) {">
								<outline text="callback (undefined, theSubscription);"/>
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function isSubscribed (screenname, feedUrl, callback) {">
					<outline text="getUserSubscriptions (screenname, function (subs) {">
						<outline text="for (var i = 0; i &lt; subs.length; i++) {">
							<outline text="if (subs [i].feedUrl == feedUrl) {">
								<outline text="callback (true);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="callback (false);"/>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function getInitialOpmlText (title) {">
					<outline text="var s = " created="Sun, 17 Feb 2013 16:05:01 GMT" pgfnum="18855">
						<outline text="&quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;ISO-8859-1\&quot;?&gt;\n&lt;opml version=\&quot;2.0\&quot;&gt;\n\t&lt;head&gt;\n\t\t&lt;title&gt;[%title%]&lt;/title&gt;\n\t\t&lt;dateCreated&gt;[%created%]&lt;/dateCreated&gt;\n\t\t&lt;dateModified&gt;[%created%]&lt;/dateModified&gt;\n\t\t&lt;/head&gt;\n\t&lt;body&gt;\n\t\t&lt;outline text=\&quot;\&quot; created=\&quot;[%created%]\&quot; /&gt;\n\t\t&lt;/body&gt;\n\t&lt;/opml&gt;&quot;;" created="Sun, 17 Feb 2013 16:55:11 GMT" pgfnum="18868"/>
						</outline>
					<outline text="var replacetable = {">
						<outline text="title: title,"/>
						<outline text="created: new Date ().toUTCString ()"/>
						<outline text="};"/>
						</outline>
					<outline text="s = utils.multipleReplaceAll (s, replacetable, false, &quot;[%&quot;, &quot;%]&quot;);"/>
					<outline text="return (s);"/>
					<outline text="}"/>
					</outline>
				<outline text="function getUserOpml (screenname, callback) {">
					<outline text="var opmlFile = config.usersFolder + screenname + &quot;/&quot; + config.fnameOpml;"/>
					<outline text="utils.sureFilePath (opmlFile, function () {">
						<outline text="fs.readFile (opmlFile, function (err, data) {">
							<outline text="var result = {">
								<outline text="};"/>
								</outline>
							<outline text="if (err) {">
								<outline text="result.opmltext = getInitialOpmlText (&quot;SYO&quot;);"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="result.opmltext = data.toString ();"/>
								<outline text="}"/>
								</outline>
							<outline text="callback (result);"/>
							<outline text="});"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function saveUserOpml (screenname, opmltext, callback) {">
					<outline text="var opmlFile = config.usersFolder + screenname + &quot;/&quot; + config.fnameOpml;"/>
					<outline text="utils.sureFilePath (opmlFile, function () {">
						<outline text="fs.writeFile (opmlFile, opmltext, function (err) {">
							<outline text="callback (err, true);"/>
							<outline text="processOpmlFile (opmlFile, screenname, function (err) {" isComment="true">
								<outline text="callback (err, true);"/>
								<outline text="});"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function userUploadedOpml (screenname, opmltext, callback) { //called when the user drag-drops an OPML file -- 4/26/18 by DW">
					<outline text="var opmlFile = config.usersFolder + screenname + &quot;/&quot; + config.fnameLastUploadedOpml;"/>
					<outline text="utils.sureFilePath (opmlFile, function () {">
						<outline text="fs.writeFile (opmlFile, opmltext, function (err) {">
							<outline text="processOpmlFile (opmlFile, screenname, function (err) {">
								<outline text="callback (err, true);"/>
								<outline text="});"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function getDynamicStats (callback) {">
					<outline text="var sqltext1 = &quot;select count(*) from subscriptions;&quot;;"/>
					<outline text="var sqltext2 = &quot;select count(*) from feeds;&quot;;"/>
					<outline text="runSqltext (sqltext1, function (result1) {">
						<outline text="console.log (utils.jsonStringify (result1));" isComment="true"/>
						<outline text="stats.ctSubscriptions = result1 [0] [&quot;count(*)&quot;];"/>
						<outline text="console.log (stats.ctSubscriptions);" isComment="true"/>
						<outline text="runSqltext (sqltext2, function (result2) {">
							<outline text="console.log (utils.jsonStringify (result2));" isComment="true"/>
							<outline text="stats.ctFeeds = result2 [0] [&quot;count(*)&quot;];"/>
							<outline text="console.log (stats.ctFeeds);" isComment="true"/>
							<outline text="if (callback !== undefined) {">
								<outline text="callback (stats);"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function getPrefs (screenname, callback) {">
					<outline text="Changes" isComment="true">
						<outline text="1/28/18; 1:58:14 PM by DW">
							<outline text="This is the initial call of the SYO client to the server. We return the information it needs to startup in one package. "/>
							</outline>
						</outline>
					<outline text="var myPrefs = {">
						<outline text="screenname: screenname"/>
						<outline text="};"/>
						</outline>
					<outline text="var folder = config.usersFolder + screenname + &quot;/&quot;;"/>
					<outline text="var prefsFile = folder + config.fnamePrefs;"/>
					<outline text="utils.sureFilePath (prefsFile, function () {">
						<outline text="fs.readFile (prefsFile, function (err, data) {">
							<outline text="if (err) {">
								<outline text="myPrefs.prefs = new Object ();"/>
								<outline text="callback (undefined, myPrefs); //return an empty prefs struct"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="try {">
									<outline text="myPrefs.prefs = JSON.parse (data.toString ());"/>
									<outline text="callback (undefined, myPrefs);"/>
									<outline text="}"/>
									</outline>
								<outline text="catch (err) {">
									<outline text="console.log (&quot;getPrefs: err.message == &quot; + err.message);"/>
									<outline text="callback (err);"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function savePrefs (screenname, jsontext, callback) {">
					<outline text="var prefsFile = config.usersFolder + screenname + &quot;/&quot; + config.fnamePrefs;"/>
					<outline text="console.log (&quot;savePrefs: screenname == &quot; + screenname + &quot;, jsontext == &quot; + jsontext);" isComment="true"/>
					<outline text="utils.sureFilePath (prefsFile, function () {">
						<outline text="fs.writeFile (prefsFile, jsontext, function (err) {">
							<outline text="callback (err, true);"/>
							<outline text="});"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function handleHttpRequest (theRequest) {">
					<outline text="const params = theRequest.params;"/>
					<outline text="var token = (theRequest.params.oauth_token !== undefined) ? theRequest.params.oauth_token : undefined;"/>
					<outline text="var secret = (theRequest.params.oauth_token_secret !== undefined) ? theRequest.params.oauth_token_secret : undefined;"/>
					<outline text=""/>
					<outline text="flOneConsoleMsgInLastMinute = true;"/>
					<outline text=""/>
					<outline text="stats.ctHits++;"/>
					<outline text="stats.ctHitsToday++;"/>
					<outline text="stats.ctHitsThisRun++;"/>
					<outline text="stats.whenLastHit = new Date ();"/>
					<outline text=""/>
					<outline text="function returnPlainText (s) {">
						<outline text="theRequest.httpReturn (200, &quot;text/plain&quot;, s.toString ());"/>
						<outline text="}"/>
						</outline>
					<outline text="function returnData (jstruct) {">
						<outline text="if (jstruct === undefined) {">
							<outline text="jstruct = {};"/>
							<outline text="}"/>
							</outline>
						<outline text="theRequest.httpReturn (200, &quot;application/json&quot;, utils.jsonStringify (jstruct));"/>
						<outline text="}"/>
						</outline>
					<outline text="function returnHtml (htmltext) {">
						<outline text="theRequest.httpReturn (200, &quot;text/html&quot;, htmltext);"/>
						<outline text="}"/>
						</outline>
					<outline text="function returnXml (xmltext) {">
						<outline text="theRequest.httpReturn (200, &quot;text/xml&quot;, xmltext);"/>
						<outline text="}"/>
						</outline>
					<outline text="function returnNotFound () {">
						<outline text="theRequest.httpReturn (404, &quot;text/plain&quot;, &quot;Not found.&quot;);"/>
						<outline text="}"/>
						</outline>
					<outline text="function returnError (jstruct) {">
						<outline text="theRequest.httpReturn (500, &quot;application/json&quot;, utils.jsonStringify (jstruct));"/>
						<outline text="}"/>
						</outline>
					<outline text="function httpReturn (err, jstruct) {">
						<outline text="if (err) {">
							<outline text="returnError (err);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="returnData (jstruct);"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function returnRedirect (url, code) {">
						<outline text="if (code === undefined) {">
							<outline text="code = 302;"/>
							<outline text="}"/>
							</outline>
						<outline text="theRequest.httpReturn (code, &quot;text/plain&quot;, code + &quot; REDIRECT&quot;);"/>
						<outline text="}"/>
						<outline text=""/>
						</outline>
					<outline text="function returnFeedInfo (feedUrl) {">
						<outline text="getFeedInfoFromDatabase (feedUrl, function (err, result) {">
							<outline text="console.log (&quot;returnFeedInfo: result == &quot; + utils.jsonStringify (result));"/>
							<outline text="httpReturn (err, result);"/>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function getSqlResult (sqltext, callback) {">
						<outline text="theSqlConnectionPool.getConnection (function (err, connection) {">
							<outline text="if (err) {">
								<outline text="httpReturn (err);"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="connection.query (sqltext, function (err, result) {">
									<outline text="connection.release ();"/>
									<outline text="httpReturn (err, result);"/>
									<outline text="});"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function returnServerHomePage () { //return true if we handled it">
						<outline text="if (config.urlServerHomePageSource === undefined) {">
							<outline text="return (false);"/>
							<outline text="}"/>
							</outline>
						<outline text="if (utils.secondsSince (whenLastHomepageRead) &gt; config.ctSecsHomepageCache) {">
							<outline text="request (config.urlServerHomePageSource, function (error, response, pagetext) {">
								<outline text="if (!error &amp;&amp; response.statusCode == 200) {">
									<outline text="homepageCache = processHomepageText (pagetext);"/>
									<outline text="whenLastHomepageRead = new Date ();"/>
									<outline text="console.log (&quot;returnServerHomePage: read cached home page text, &quot; + homepageCache.length + &quot; chars.&quot;);" isComment="true"/>
									<outline text="returnHtml (homepageCache);"/>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="returnNotFound ();"/>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="returnHtml (homepageCache);"/>
							<outline text="}"/>
							</outline>
						<outline text="return (true);"/>
						<outline text="}"/>
						</outline>
					<outline text="function updateUserOpml (screenname) { //code was repeating, factored here">
						<outline text="uploadUserOpmlToS3 (screenname, function (err, result) {">
							<outline text="httpReturn (err, result);"/>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function callWithScreenname (callback) {">
						<outline text="davetwitter.getScreenName (token, secret, function (screenname) {" created="Wed, 09 Jul 2014 23:57:16 GMT" pgfnum="42784">
							<outline text="if (screenname === undefined) {" created="Thu, 10 Jul 2014 00:53:00 GMT" pgfnum="42793">
								<outline text="returnError ({message: &quot;Can't do the thing you want because the accessToken is not valid.&quot;});    "/>
								<outline text="}" created="Thu, 10 Jul 2014 00:53:11 GMT" pgfnum="42797"/>
								</outline>
							<outline text="else {" created="Thu, 10 Jul 2014 00:53:12 GMT" pgfnum="42798">
								<outline text="callback (screenname);"/>
								<outline text="}" created="Thu, 10 Jul 2014 00:53:14 GMT" pgfnum="42799"/>
								</outline>
							<outline text="});" created="Wed, 09 Jul 2014 23:57:25 GMT" pgfnum="42785"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text=""/>
					<outline text="switch (theRequest.lowerpath) {">
						<outline text="case &quot;/&quot;:">
							<outline text="return (returnServerHomePage ());"/>
							</outline>
						<outline text="case &quot;/now&quot;: " created="Sat, 08 Feb 2014 16:43:58 GMT" pgfnum="37236">
							<outline text="theRequest.httpReturn (200, &quot;text/plain&quot;, new Date ());" isComment="true"/>
							<outline text="returnPlainText (new Date ());"/>
							<outline text="return (true); //we handled it" created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266"/>
							</outline>
						<outline text="case &quot;/reload&quot;:" isComment="true">
							<outline text="folderloader.load (config.s3path, &quot;./&quot;, function (logtext) {">
								<outline text="if (logtext.length == 0) {">
									<outline text="logtext = &quot;No changes.&quot;;"/>
									<outline text="}"/>
									</outline>
								<outline text="theRequest.httpReturn (200, &quot;text/html&quot;, logtext);"/>
								<outline text="});"/>
								</outline>
							<outline text="return (true); //we handled it" created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266"/>
							</outline>
						<outline text="case &quot;/hotlist&quot;:">
							<outline text="getHotlist (function (result) {">
								<outline text="theRequest.httpReturn (200, &quot;application/json&quot;, utils.jsonStringify (result));" isComment="true"/>
								<outline text="returnData (result);"/>
								<outline text="});"/>
								</outline>
							<outline text="return (true); //we handled it" created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266"/>
							</outline>
						<outline text="case &quot;/updatehotlist&quot;: //3/16/18 by DW">
							<outline text="updateHotlist (theRequest.params.when, function (result) {">
								<outline text="console.log (&quot;updateHotlist: username == &quot; + theRequest.params.username);" isComment="true"/>
								<outline text="returnData (result);"/>
								<outline text="theRequest.httpReturn (200, &quot;application/json&quot;, utils.jsonStringify (result));" isComment="true"/>
								<outline text="});"/>
								</outline>
							<outline text="return (true); //we handled it" created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266"/>
							</outline>
						<outline text="case &quot;/updatelog&quot;: //3/28/18 by DW">
							<outline text="updateLog (theRequest.params.when, function (result) {">
								<outline text="theRequest.httpReturn (200, &quot;application/json&quot;, utils.jsonStringify (result));" isComment="true"/>
								<outline text="returnData (result);"/>
								<outline text="});"/>
								</outline>
							<outline text="return (true); //we handled it" created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266"/>
							</outline>
						<outline text="case &quot;/stats&quot;:">
							<outline text="getDynamicStats (function (stats) {">
								<outline text="returnData (stats);"/>
								<outline text="});"/>
								</outline>
							<outline text="return (true); //we handled it" created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266"/>
							</outline>
						<outline text="case &quot;/getfeedinfo&quot;:">
							<outline text="getFeedInfoFromDatabase (theRequest.params.feedurl, function (err, result) {">
								<outline text="httpReturn (err, result);"/>
								<outline text="});"/>
								</outline>
							<outline text="return (true); //we handled it" created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266"/>
							</outline>
						<outline text="case &quot;/readfeed&quot;: //3/7/18 by DW">
							<outline text="getFeedInfo (theRequest.params.feedurl, function (err, result) {">
								<outline text="httpReturn (err, result);"/>
								<outline text="});"/>
								</outline>
							<outline text="return (true); //we handled it" created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266"/>
							</outline>
						<outline text="case &quot;/readfeedincludeeverything&quot;: //4/6/19 by DW">
							<outline text="readFeedIncludeEverything (theRequest.params.feedurl, function (err, result) {">
								<outline text="httpReturn (err, result);"/>
								<outline text="});"/>
								</outline>
							<outline text="return (true); //we handled it" created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266"/>
							</outline>
						<outline text="case &quot;/ping&quot;:">
							<outline text="updateOneFeed (theRequest.params.feedurl, function (result) {">
								<outline text="returnData (result);"/>
								<outline text="});"/>
								</outline>
							<outline text="return (true); //we handled it" created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266"/>
							</outline>
						<outline text="case &quot;/deref&quot;: //4/19/18 by DW">
							<outline text="derefUrl (theRequest.params.url, function (err, url) {">
								<outline text="httpReturn (err, url);"/>
								<outline text="});"/>
								</outline>
							<outline text="return (true); //we handled it" created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266"/>
							</outline>
						<outline text="case &quot;/getfollowers&quot;:">
							<outline text="getUsersWhoFollowFeed (theRequest.params.feedurl, function (result) {">
								<outline text="returnData (result);"/>
								<outline text="});"/>
								</outline>
							<outline text="return (true); //we handled it" created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266"/>
							</outline>
						<outline text="case &quot;/knownfeeds&quot;:" isComment="true">
							<outline text="getKnownFeeds (function (result) {">
								<outline text="theRequest.httpReturn (200, &quot;application/json&quot;, utils.jsonStringify (result));" isComment="true"/>
								<outline text="returnData (result);"/>
								<outline text="});"/>
								</outline>
							<outline text="return (true); //we handled it" created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266"/>
							</outline>
						<outline text="case &quot;/geterrantfeeds&quot;: //3/9/18 by DW">
							<outline text="getSqlResult (&quot;select * from feeds where ctConsecutiveErrors &gt; 0;&quot;);"/>
							<outline text="return (true); //we handled it" created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266"/>
							</outline>
						<outline text="case &quot;/subscribe&quot;:">
							<outline text="callWithScreenname (function (screenname) {">
								<outline text="subscribe (screenname, theRequest.params.feedurl, function (result) {">
									<outline text="updateUserOpml (screenname);"/>
									<outline text="returnFeedInfo (theRequest.params.feedurl);"/>
									<outline text="});"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="return (true); //we handled it" created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266"/>
							</outline>
						<outline text="case &quot;/unsubscribe&quot;: //3/10/18 by DW">
							<outline text="callWithScreenname (function (screenname) {">
								<outline text="unsubscribe (screenname, theRequest.params.feedurl, function (result) {">
									<outline text="updateUserOpml (screenname);"/>
									<outline text="returnFeedInfo (theRequest.params.feedurl);"/>
									<outline text="getFeedInfoFromDatabase (theRequest.params.feedurl, function (err, result) {" isComment="true">
										<outline text="httpReturn (err, result);"/>
										<outline text="});"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="return (true); //we handled it" created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266"/>
							</outline>
						<outline text="case &quot;/issubscribed&quot;:">
							<outline text="callWithScreenname (function (screenname) {">
								<outline text="isSubscribed (screenname, theRequest.params.feedurl, function (result) {">
									<outline text="returnData (result);"/>
									<outline text="});"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="return (true); //we handled it" created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266"/>
							</outline>
						<outline text="case &quot;/setcategories&quot;: //12/3/20 by DW">
							<outline text="callWithScreenname (function (screenname) {">
								<outline text="setCategoriesForSubscription (screenname, params.feedurl, params.catstring, function (err, theSubscription) {">
									<outline text="if (!err) {">
										<outline text="updateUserOpml (screenname);"/>
										<outline text="}"/>
										</outline>
									<outline text="httpReturn (err, theSubscription);"/>
									<outline text="});"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="return (true); //we handled it" created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266"/>
							</outline>
						<outline text="case &quot;/updateopml&quot;: //12/6/20 by DW">
							<outline text="callWithScreenname (function (screenname) {">
								<outline text="uploadUserOpmlToS3 (screenname, httpReturn);"/>
								<outline text="});"/>
								</outline>
							<outline text="return (true); //we handled it" created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266"/>
							</outline>
						<outline text="case &quot;/getsubscription&quot;: //12/4/20 by DW">
							<outline text="callWithScreenname (function (screenname) {">
								<outline text="getSubscription (screenname, params.feedurl, httpReturn);"/>
								<outline text="});"/>
								</outline>
							<outline text="return (true); //we handled it" created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266"/>
							</outline>
						<outline text="case &quot;/getprefs&quot;:">
							<outline text="callWithScreenname (function (screenname) {">
								<outline text="getPrefs (screenname, function (err, result) {">
									<outline text="httpReturn (err, result);"/>
									<outline text="});"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="return (true); //we handled it" created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266"/>
							</outline>
						<outline text="case &quot;/saveprefs&quot;:">
							<outline text="callWithScreenname (function (screenname) {">
								<outline text="savePrefs (screenname, theRequest.params.prefs, function (err, result) {">
									<outline text="httpReturn (err, result);"/>
									<outline text="});"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="return (true); //we handled it" created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266"/>
							</outline>
						<outline text="case &quot;/getopml&quot;:">
							<outline text="callWithScreenname (function (screenname) {">
								<outline text="getUserOpml (screenname, function (result) {" isComment="true">
									<outline text=" returnData (result);"/>
									<outline text="});"/>
									</outline>
								<outline text="getUserOpmlSubscriptions (screenname, undefined, function (err, opmltext) {">
									<outline text="if (err) {">
										<outline text="returnError (err);"/>
										<outline text="}"/>
										</outline>
									<outline text="else {">
										<outline text="var result = {">
											<outline text="opmltext: opmltext"/>
											<outline text="};"/>
											</outline>
										<outline text="returnData (result);"/>
										<outline text="}"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="return (true); //we handled it" created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266"/>
							</outline>
						<outline text="case &quot;/saveopml&quot;:">
							<outline text="callWithScreenname (function (screenname) {">
								<outline text="console.log (&quot;/saveopml: theRequest.postBody.length == &quot; + theRequest.postBody.length);"/>
								<outline text="userUploadedOpml (screenname, theRequest.postBody, function (err, result) {">
									<outline text="updateUserOpml (screenname);"/>
									<outline text="uploadUserOpmlToS3 (screenname, function (err, result) {" isComment="true">
										<outline text="httpReturn (err, result);"/>
										<outline text="});"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="return (true); //we handled it" created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266"/>
							</outline>
						<outline text="case &quot;/getsubs&quot;:">
							<outline text="getUserSubscriptions (theRequest.params.username, function (subsArray) {">
								<outline text="var jstruct = {">
									<outline text="opmlUrl: getUserOpmlUrl (theRequest.params.username),"/>
									<outline text="theSubs: subsArray"/>
									<outline text="};"/>
									</outline>
								<outline text="returnData (jstruct);"/>
								<outline text="});"/>
								</outline>
							<outline text="return (true); //we handled it" created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266"/>
							</outline>
						<outline text="case &quot;/getopmlsubs&quot;:">
							<outline text="getUserOpmlSubscriptions (theRequest.params.username, undefined, function (err, opmltext) {">
								<outline text="if (err) {">
									<outline text="returnError (err);"/>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="returnXml (opmltext);"/>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="return (true); //we handled it" created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266"/>
							</outline>
						<outline text="case &quot;/deleteallsubs&quot;: //3/9/18 by DW">
							<outline text="callWithScreenname (function (screenname) {">
								<outline text="deleteSubscriptions (screenname, function (result) {">
									<outline text="updateUserOpml (screenname);"/>
									<outline text="uploadUserOpmlToS3 (screenname, function (err, result) {" isComment="true">
										<outline text="httpReturn (err, result);"/>
										<outline text="});"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="return (true); //we handled it" created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266"/>
							</outline>
						<outline text="case &quot;/favicon.ico&quot;:" created="Sat, 08 Feb 2014 16:43:58 GMT" pgfnum="37236">
							<outline text="returnRedirect (config.urlFavicon);"/>
							<outline text="break;" created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266"/>
							</outline>
						<outline text="case &quot;/geteditoropml&quot;:">
							<outline text="callWithScreenname (function (screenname) {">
								<outline text="getUserOpml (screenname, function (result) {">
									<outline text=" returnData (result);"/>
									<outline text="});"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="return (true); //we handled it" created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266"/>
							</outline>
						<outline text="case &quot;/saveeditoropml&quot;:">
							<outline text="callWithScreenname (function (screenname) {">
								<outline text="var opmltext = theRequest.postBody;"/>
								<outline text="saveUserOpml (screenname, opmltext, function (err, result) {">
									<outline text="userUploadedOpml (screenname, opmltext, function (err, result) {">
										<outline text="processListOfLists (screenname, opmltext, function (err, filelist) {">
											<outline text="httpReturn (err, result);"/>
											<outline text="});"/>
											</outline>
										<outline text="});"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="return (true); //we handled it" created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266"/>
							</outline>
						<outline text="case &quot;/getrecommendations&quot;: //3/30/19 by DW">
							<outline text="callWithScreenname (function (screenname) {">
								<outline text="console.log (&quot;about to call getUserRecommendations with screenname == &quot; + screenname);"/>
								<outline text="getUserRecommendations (screenname, function (err, result) {">
									<outline text="httpReturn (err, result);"/>
									<outline text="});"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="return (true); //we handled it" created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="return (false); //we didn't handle it"/>
					<outline text="}"/>
					</outline>
				<outline text="function readConfig (callback) {">
					<outline text="utils.sureFilePath (fnameConfig, function () {">
						<outline text="fs.readFile (fnameConfig, function (err, data) {">
							<outline text="if (!err) {">
								<outline text="try {">
									<outline text="var jstruct = JSON.parse (data.toString ());"/>
									<outline text="console.log (utils.jsonStringify (jstruct)); " isComment="true"/>
									<outline text="for (var x in jstruct) {">
										<outline text="config [x] = jstruct [x];"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="catch (err) {">
									<outline text="console.log (&quot;readConfig: err == &quot; + err.message);"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="if (callback !== undefined) {">
								<outline text="callback ();"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function readStats (callback) {">
					<outline text="utils.sureFilePath (config.fnameStats, function () {">
						<outline text="fs.readFile (config.fnameStats, function (err, data) {">
							<outline text="if (!err) {">
								<outline text="try {">
									<outline text="var jstruct = JSON.parse (data.toString ());"/>
									<outline text="console.log (utils.jsonStringify (jstruct)); " isComment="true"/>
									<outline text="for (var x in jstruct) {">
										<outline text="stats [x] = jstruct [x];"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="catch (err) {">
									<outline text="console.log (&quot;readStats: err == &quot; + err.message);" isComment="true"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="if (callback !== undefined) {">
								<outline text="callback ();"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function writeStats (callback) {">
					<outline text="utils.sureFilePath (config.fnameStats, function () {">
						<outline text="fs.writeFile (config.fnameStats, utils.jsonStringify (stats), function (err) {">
							<outline text="if (callback !== undefined) {">
								<outline text="callback ();"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function everyMinute () {">
					<outline text="var now = new Date (), timestring = now.toLocaleTimeString ();"/>
					<outline text="if (now.getMinutes () == 0) { //12/3/20 by DW">
						<outline text="if (flOneConsoleMsgInLastMinute) {">
							<outline text="console.log (&quot;&quot;);"/>
							<outline text="flOneConsoleMsgInLastMinute = false;"/>
							<outline text="}"/>
							</outline>
						<outline text="console.log (myProductName + &quot; v&quot; + myVersion + &quot;: &quot; + timestring + &quot;.\n&quot;);"/>
						<outline text="}"/>
						</outline>
					<outline text="readConfig ();"/>
					<outline text="if (!utils.sameDay (stats.whenLastDayRollover, now)) { //date rollover" created="Mon, 03 Feb 2014 18:45:55 GMT" pgfnum="36993">
						<outline text="stats.whenLastDayRollover = now;" created="Wed, 12 Feb 2014 15:57:43 GMT" pgfnum="37575"/>
						<outline text="stats.ctFeedUpdatesToday = 0;"/>
						<outline text="stats.ctHitsToday = 0;"/>
						<outline text="statsChanged ();"/>
						<outline text="doBackup (); //11/26/19 by DW"/>
						<outline text="}" created="Mon, 03 Feb 2014 18:46:08 GMT" pgfnum="36994"/>
						</outline>
					<outline text="if (!utils.sameDay (theLog.whenLastRollover, now)) { //log rollover" created="Mon, 03 Feb 2014 18:45:55 GMT" pgfnum="36993">
						<outline text="theLog.whenLastRollover = now;"/>
						<outline text="theLog.logArray = new Array ();"/>
						<outline text="flLogChanged = true;"/>
						<outline text="writeLogIfChanged (); "/>
						<outline text="}" created="Mon, 03 Feb 2014 18:46:08 GMT" pgfnum="36994"/>
						</outline>
					<outline text="if (flHotlistChanged) { //3/22/18 by DW">
						<outline text="uploadHotlistToS3 (function () {">
							<outline text="flHotlistChanged = false;"/>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function everySecond () {">
					<outline text="if (config.flFeedUpdates) {">
						<outline text="if (utils.secondsSince (stats.whenLastFeedUpdate) &gt; config.ctSecsBetwFeedUpdates) {">
							<outline text="stats.whenLastFeedUpdate = new Date ();"/>
							<outline text="updateLeastRecentlyUpdatedFeed (function () {">
								<outline text="stats.ctFeedUpdates++;"/>
								<outline text="stats.ctFeedUpdatesToday++;"/>
								<outline text="stats.ctFeedUpdatesThisRun++;"/>
								<outline text="statsChanged ();"/>
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="if (flStatsChanged) {">
						<outline text="flStatsChanged = false;"/>
						<outline text="writeStats ();"/>
						<outline text="}"/>
						</outline>
					<outline text="writeLogIfChanged (); //3/26/18 by DW"/>
					<outline text="}"/>
					</outline>
				<outline text="function startup () {">
					<outline text="console.log (&quot;\n&quot; + myProductName + &quot; v&quot; + myVersion + &quot;\n&quot;);"/>
					<outline text="readStats (function () {">
						<outline text="stats.productName = myProductName;"/>
						<outline text="stats.version = myVersion;"/>
						<outline text="stats.whenLastStartup = new Date ();"/>
						<outline text="stats.ctStartups++;"/>
						<outline text="stats.ctFeedUpdatesThisRun = 0;"/>
						<outline text="stats.ctHitsThisRun = 0;"/>
						<outline text="statsChanged ();"/>
						<outline text="readCurrentLogFile (function () {">
							<outline text="readConfig (function () {">
								<outline text="console.log (&quot;config == &quot; + utils.jsonStringify (config));"/>
								<outline text="theSqlConnectionPool = mysql.createPool (config.database);"/>
								<outline text="config.twitter.httpRequestCallback = handleHttpRequest;"/>
								<outline text="config.twitter.flPostEnabled = true; //3/1/18 by DW"/>
								<outline text="davetwitter.start (config.twitter, function () {">
									<outline text="});"/>
									</outline>
								<outline text="setInterval (everySecond, 1000); "/>
								<outline text="utils.runEveryMinute (everyMinute);"/>
								<outline text="" isComment="true"/>
								<outline text="" isComment="true"/>
								<outline text="" isComment="true"/>
								<outline text="" isComment="true"/>
								<outline text="" isComment="true"/>
								<outline text="utils.runAtTopOfMinute (function () {" isComment="true">
									<outline text="setInterval (everyMinute, 60000); "/>
									<outline text="everyMinute ();"/>
									<outline text="});"/>
									</outline>
								<outline text="doBackup (); //11/26/19 by DW -- just to test"/>
								<outline text="startLogWatchThread (); //3/26/18 by DW" isComment="true"/>
								<outline text="" isComment="true"/>
								<outline text="importOpmlFiles (function () {" isComment="true">
									<outline text="console.log (&quot;importOpmlFiles returned.&quot;);"/>
									<outline text="});"/>
									</outline>
								<outline text="" isComment="true"/>
								<outline text="" isComment="true"/>
								<outline text="" isComment="true"/>
								<outline text="updateLeastRecentlyUpdatedFeed ();" isComment="true"/>
								<outline text="" isComment="true"/>
								<outline text="resetAllSubCounts ();" isComment="true"/>
								<outline text="" isComment="true"/>
								<outline text="davehttp.start (config, function (theRequest) {" isComment="true">
									<outline text="switch (theRequest.lowerpath) {">
										<outline text="case &quot;/reload&quot;:">
											<outline text="folderloader.load (config.s3path, &quot;./&quot;, function (logtext) {">
												<outline text="if (logtext.length == 0) {">
													<outline text="logtext = &quot;No changes.&quot;;"/>
													<outline text="}"/>
													</outline>
												<outline text="theRequest.httpReturn (200, &quot;text/html&quot;, logtext);"/>
												<outline text="});"/>
												</outline>
											<outline text="return;"/>
											</outline>
										<outline text="case &quot;/hotlist&quot;:">
											<outline text="getHotlist (function (result) {">
												<outline text="theRequest.httpReturn (200, &quot;application/json&quot;, utils.jsonStringify (result));"/>
												<outline text="});"/>
												</outline>
											<outline text="return;"/>
											</outline>
										<outline text="case &quot;/knownfeeds&quot;:">
											<outline text="getKnownFeeds (function (result) {">
												<outline text="theRequest.httpReturn (200, &quot;application/json&quot;, utils.jsonStringify (result));"/>
												<outline text="});"/>
												</outline>
											<outline text="return;"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="theRequest.httpReturn (404, &quot;text/plain&quot;, &quot;Not found.&quot;);"/>
									<outline text="});"/>
									</outline>
								<outline text="addFeedToDatabase (&quot;http://feeds.engadget.com/weblogsinc/engadget&quot;, function (result) {   " isComment="true">
									<outline text="console.log (utils.jsonStringify (result));"/>
									<outline text="});"/>
									</outline>
								<outline text="importOpmlFiles (function () {" isComment="true">
									<outline text="getInfoAboutKnownFeeds (function () {">
										<outline text="console.log (&quot;Finito&quot;);"/>
										<outline text="});"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="startup ();"/>
				</outline>
			<outline text="loadfeedbasefolder.js">
				<outline text="//standalone app that loads new code from an s3 location">
					<outline text="//this way is much faster and more dependable than Dropbox"/>
					<outline text="//makes the development run much faster"/>
					<outline text="//I keep this running on the server when I am in development mode"/>
					<outline text="//1/30/18 by DW"/>
					</outline>
				<outline text="const folderloader = require (&quot;s3folderloader&quot;);"/>
				<outline text="const utils = require (&quot;daveutils&quot;);"/>
				<outline text="const davehttp = require (&quot;davehttp&quot;);  "/>
				<outline text=""/>
				<outline text="const config = {">
					<outline text="port: 1406,"/>
					<outline text="flLogToConsole: true,"/>
					<outline text="flAllowAccessFromAnywhere: true, //for davehttp"/>
					<outline text="s3path: &quot;/scripting.com/code/feedbase/&quot;"/>
					<outline text="};"/>
					</outline>
				<outline text="davehttp.start (config, function (theRequest) {">
					<outline text="switch (theRequest.lowerpath) {">
						<outline text="case &quot;/reload&quot;:">
							<outline text="folderloader.load (config.s3path, &quot;./&quot;, function (logtext) {">
								<outline text="if (logtext.length == 0) {">
									<outline text="logtext = &quot;No changes.&quot;;"/>
									<outline text="}"/>
									</outline>
								<outline text="theRequest.httpReturn (200, &quot;text/html&quot;, logtext);"/>
								<outline text="});"/>
								</outline>
							<outline text="return;"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="theRequest.httpReturn (404, &quot;text/plain&quot;, &quot;Not found.&quot;);"/>
					<outline text="});"/>
					</outline>
				</outline>
			<outline text="placeholderhomepage.js">
				<outline text="&lt;html&gt;">
					<outline text="&lt;head&gt;">
						<outline text="&lt;title&gt;feedbase.io&lt;/title&gt;"/>
						<outline text="&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;"/>
						<outline text="&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;"/>
						<outline text="&lt;%basicIncludes2%&gt;"/>
						<outline text="&lt;link href=&quot;https://fonts.googleapis.com/css?family=Lobster&quot; rel=&quot;stylesheet&quot;&gt;"/>
						<outline text="&lt;script&gt;" created="Thu, 12 Dec 2013 17:06:51 GMT" pgfnum="33502">
							<outline text="function everySecond () {">
								<outline text="}"/>
								</outline>
							<outline text="function startup () {">
								<outline text="console.log (&quot;startup&quot;);"/>
								<outline text="self.setInterval (everySecond, 1000); "/>
								<outline text="}"/>
								</outline>
							<outline text="&lt;/script&gt;" created="Thu, 12 Dec 2013 17:07:17 GMT" pgfnum="33504"/>
							</outline>
						<outline text="&lt;style&gt;" created="Wed, 11 Sep 2013 14:27:45 GMT" pgfnum="30095">
							<outline text="body {">
								<outline text="font-family: Ubuntu;"/>
								<outline text="font-size: 18px;"/>
								<outline text="background-color: whitesmoke;"/>
								<outline text="}"/>
								</outline>
							<outline text=".divPageBody {">
								<outline text="width: 60%;"/>
								<outline text="margin-top: 90px;" isComment="true"/>
								<outline text="margin-left: auto;"/>
								<outline text="margin-right: auto;"/>
								<outline text="}"/>
								</outline>
							<outline text=".divProductName {">
								<outline text="font-family: &quot;Lobster&quot;;"/>
								<outline text="font-size: 100px;"/>
								<outline text="color: darkgreen;"/>
								<outline text="text-align: center;"/>
								<outline text="margin-top: 50px;"/>
								<outline text="line-height: 130%;"/>
								<outline text="}"/>
								</outline>
							<outline text=".divVersion {">
								<outline text="font-family: &quot;Ubuntu&quot;;"/>
								<outline text="font-size: 22px;"/>
								<outline text="color: darkgreen;"/>
								<outline text="text-align: center;"/>
								<outline text="line-height: 130%;"/>
								<outline text="margin-top: -15px;"/>
								<outline text="}"/>
								</outline>
							<outline text="&lt;/style&gt;" created="Wed, 11 Sep 2013 14:30:17 GMT" pgfnum="30105"/>
							</outline>
						<outline text="&lt;/head&gt;"/>
						</outline>
					<outline text="&lt;body&gt;">
						<outline text="&lt;div class=&quot;divPageBody&quot;&gt;">
							<outline text="&lt;div class=&quot;divProductName&quot;&gt;[%productName%]&lt;/div&gt;"/>
							<outline text="&lt;div class=&quot;divVersion&quot;&gt;Version [%version%]&lt;/div&gt;"/>
							<outline text="&lt;/div&gt;"/>
							</outline>
						<outline text="&lt;script&gt;">
							<outline text="$(document).ready (function () {">
								<outline text="startup ();" created="Wed, 30 Oct 2013 15:20:06 GMT" pgfnum="30656"/>
								<outline text="});"/>
								</outline>
							<outline text="&lt;/script&gt;"/>
							</outline>
						<outline text="&lt;/body&gt;"/>
						</outline>
					<outline text="&lt;/html&gt;"/>
					</outline>
				</outline>
			<outline text="backup/feedbasebackup.js">
				<outline text="var myProductName = &quot;feedBaseBackup&quot;, myVersion = &quot;0.4.0&quot;;     " created="Mon, 03 Feb 2014 03:21:03 GMT" pgfnum="36831"/>
				<outline text=""/>
				<outline text="const mysql = require (&quot;mysql&quot;);"/>
				<outline text="const utils = require (&quot;daveutils&quot;);"/>
				<outline text="const fs = require (&quot;fs&quot;);"/>
				<outline text="const s3 = require (&quot;daves3&quot;); "/>
				<outline text=""/>
				<outline text="var config = {">
					<outline text="backupFolderPath: &quot;&quot;"/>
					<outline text="};"/>
					</outline>
				<outline text="const fnameConfig = &quot;config.json&quot;;"/>
				<outline text=""/>
				<outline text="function encode (s) {">
					<outline text="return (mysql.escape (s));"/>
					<outline text="}"/>
					</outline>
				<outline text="function encodeValues (values) {">
					<outline text="var part1 = &quot;&quot;, part2 = &quot;&quot;;"/>
					<outline text="for (var x in values) { //generate something like this: (feedurl, title, htmlurl, description, whenupdated)">
						<outline text="if (part1.length &gt; 0) {">
							<outline text="part1 += &quot;, &quot;;"/>
							<outline text="}"/>
							</outline>
						<outline text="part1 += x;"/>
						<outline text="}"/>
						</outline>
					<outline text="for (var x in values) { //and this: ('http://scripting.com/rss.xml', Scripting News', 'http://scripting.com/', 'Even worse etc', '2018-02-04 12:04:08')">
						<outline text="if (part2.length &gt; 0) {">
							<outline text="part2 += &quot;, &quot;;"/>
							<outline text="}"/>
							</outline>
						<outline text="part2 += encode (values [x]);"/>
						<outline text="}"/>
						</outline>
					<outline text="return (&quot;(&quot; + part1 + &quot;) values (&quot; + part2 + &quot;);&quot;);"/>
					<outline text="}"/>
					</outline>
				<outline text="function runSqltext (s, callback) {">
					<outline text="theSqlConnectionPool.getConnection (function (err, connection) {">
						<outline text="if (err) {">
							<outline text="console.log (&quot;runSqltext: err.code == &quot; + err.code + &quot;, err.message == &quot; + err.message);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="connection.query (s, function (err, result) {">
								<outline text="connection.release ();"/>
								<outline text="if (err) {">
									<outline text="console.log (&quot;runSqltext: err.code == &quot; + err.code + &quot;, err.message == &quot; + err.message);"/>
									<outline text="if (callback !== undefined) {">
										<outline text="callback (undefined);"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="console.log (&quot;result == &quot; + utils.jsonStringify (result));" isComment="true"/>
									<outline text="if (callback !== undefined) {">
										<outline text="callback (result);"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function getKnownFeeds (callback) {" isComment="true">
					<outline text="var sqltext = &quot;select feedUrl from feeds where code = 200;&quot;;"/>
					<outline text="var sqltext = &quot;select distinct feedUrl from subscriptions;&quot;;" isComment="true"/>
					<outline text="runSqltext (sqltext, function (result) {">
						<outline text="var feeds = new Array ();"/>
						<outline text="for (var i = 0; i &lt; result.length; i++) {">
							<outline text="feeds.push (result [i].feedUrl);"/>
							<outline text="}"/>
							</outline>
						<outline text="callback (feeds);"/>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function backupSubscriptions (callback) {">
					<outline text="var sqltext = &quot;select * from subscriptions;&quot;;"/>
					<outline text="runSqltext (sqltext, function (result) {">
						<outline text="var subs = new Array ();"/>
						<outline text="for (var i = 0; i &lt; result.length; i++) {">
							<outline text="subs.push (result [i]);"/>
							<outline text="}"/>
							</outline>
						<outline text="callback (subs);"/>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function backupFeeds (callback) {">
					<outline text="var sqltext = &quot;select * from feeds;&quot;;"/>
					<outline text="runSqltext (sqltext, function (result) {">
						<outline text="var feeds = new Array ();"/>
						<outline text="console.log (result.length);" isComment="true"/>
						<outline text="console.log (utils.jsonStringify (result [0]));" isComment="true"/>
						<outline text="for (var i = 0; i &lt; result.length; i++) {">
							<outline text="feeds.push (result [i]);"/>
							<outline text="}"/>
							</outline>
						<outline text="callback (feeds);"/>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function writeBackupFile (theData, fname, callback) {">
					<outline text="var f = config.backupFolderPath + fname;"/>
					<outline text="utils.sureFilePath (f, function () {">
						<outline text="var jsontext = utils.jsonStringify (theData);"/>
						<outline text="fs.writeFile (f, jsontext, function (err) {">
							<outline text="var f = config.backupFolderPath + utils.getDatePath (undefined, true) + fname;"/>
							<outline text="utils.sureFilePath (f, function () {">
								<outline text="fs.writeFile (f, jsontext, function (err) {">
									<outline text="console.log (&quot;writeBackupFile: &quot; + fname + &quot; is &quot; + utils.megabyteString (jsontext.length));"/>
									<outline text="if (callback !== undefined) {">
										<outline text="callback ();"/>
										<outline text="}"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function readConfig (callback) {">
					<outline text="utils.sureFilePath (fnameConfig, function () {">
						<outline text="fs.readFile (fnameConfig, function (err, data) {">
							<outline text="if (!err) {">
								<outline text="try {">
									<outline text="var jstruct = JSON.parse (data.toString ());"/>
									<outline text="console.log (utils.jsonStringify (jstruct)); " isComment="true"/>
									<outline text="for (var x in jstruct) {">
										<outline text="config [x] = jstruct [x];"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="catch (err) {">
									<outline text="console.log (&quot;readConfig: err == &quot; + err.message);"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="if (callback !== undefined) {">
								<outline text="callback ();"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function doBackup () {">
					<outline text="var whenstart = new Date ();"/>
					<outline text="backupFeeds (function (theFeeds) {">
						<outline text="writeBackupFile (theFeeds, &quot;feeds.json&quot;, function () {">
							<outline text="theFeeds = []; //reclaim memory used by the array"/>
							<outline text="backupSubscriptions (function (theSubs) {">
								<outline text="writeBackupFile (theSubs, &quot;subscriptions.json&quot;, function () {">
									<outline text="console.log (&quot;doBackup: backup took &quot; + utils.secondsSince (whenstart) + &quot; secs.&quot;);"/>
									<outline text="});"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function everyMinute () {">
					<outline text="var now = new Date (), timestring = now.toLocaleTimeString ();"/>
					<outline text="console.log (myProductName + &quot; v&quot; + myVersion + &quot;: &quot; + timestring + &quot;.\n&quot;);"/>
					<outline text="if ((now.getMinutes () % 20) == 0) { //every twenty minutes do a backup">
						<outline text="doBackup ();"/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="readConfig (function () {">
					<outline text="console.log (&quot;config == &quot; + utils.jsonStringify (config));"/>
					<outline text="theSqlConnectionPool = mysql.createPool (config.database);"/>
					<outline text="doBackup ();"/>
					<outline text="utils.runAtTopOfMinute (function () {">
						<outline text="setInterval (everyMinute, 60000); "/>
						<outline text="everyMinute ();"/>
						<outline text="});"/>
						</outline>
					<outline text="});"/>
					</outline>
				</outline>
			<outline text="backup/feedbaserestore.js">
				<outline text="var myProductName = &quot;feedBaseRestore&quot;, myVersion = &quot;0.4.0&quot;;     " created="Mon, 03 Feb 2014 03:21:03 GMT" pgfnum="36831"/>
				<outline text=""/>
				<outline text="const mysql = require (&quot;mysql&quot;);"/>
				<outline text="const utils = require (&quot;daveutils&quot;);"/>
				<outline text="const fs = require (&quot;fs&quot;);"/>
				<outline text="const dateFormat = require (&quot;dateformat&quot;);"/>
				<outline text=""/>
				<outline text="var config = {">
					<outline text="backupFolderPath: &quot;&quot;"/>
					<outline text="};"/>
					</outline>
				<outline text="const fnameConfig = &quot;config.json&quot;;"/>
				<outline text=""/>
				<outline text="var theFeeds, flFeedQueryPending = false, ixNextFeed = 0, feedInterval;"/>
				<outline text="var theSubscriptions, flSubscriptionQueryPending = false, ixNextSubscription = 0, subscriptionInterval;"/>
				<outline text=""/>
				<outline text="function encode (s) {">
					<outline text="return (mysql.escape (s));"/>
					<outline text="}"/>
					</outline>
				<outline text="function formatDateTime (when) {">
					<outline text="if (when === undefined) {">
						<outline text="when = new Date ();"/>
						<outline text="}"/>
						</outline>
					<outline text="return (dateFormat (new Date (when), &quot;yyyy-mm-dd HH:MM:ss&quot;));"/>
					<outline text="}"/>
					</outline>
				<outline text="function encodeValues (values) {">
					<outline text="var part1 = &quot;&quot;, part2 = &quot;&quot;;"/>
					<outline text="for (var x in values) { //generate something like this: (feedurl, title, htmlurl, description, whenupdated)">
						<outline text="if (part1.length &gt; 0) {">
							<outline text="part1 += &quot;, &quot;;"/>
							<outline text="}"/>
							</outline>
						<outline text="part1 += x;"/>
						<outline text="}"/>
						</outline>
					<outline text="for (var x in values) { //and this: ('http://scripting.com/rss.xml', Scripting News', 'http://scripting.com/', 'Even worse etc', '2018-02-04 12:04:08')">
						<outline text="if (part2.length &gt; 0) {">
							<outline text="part2 += &quot;, &quot;;"/>
							<outline text="}"/>
							</outline>
						<outline text="part2 += encode (values [x]);"/>
						<outline text="}"/>
						</outline>
					<outline text="return (&quot;(&quot; + part1 + &quot;) values (&quot; + part2 + &quot;);&quot;);"/>
					<outline text="}"/>
					</outline>
				<outline text="function runSqltext (s, callback) {">
					<outline text="theSqlConnectionPool.getConnection (function (err, connection) {">
						<outline text="if (err) {">
							<outline text="console.log (&quot;runSqltext: err.code == &quot; + err.code + &quot;, err.message == &quot; + err.message);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="connection.query (s, function (err, result) {">
								<outline text="connection.release ();"/>
								<outline text="if (err) {">
									<outline text="console.log (&quot;runSqltext: err.code == &quot; + err.code + &quot;, err.message == &quot; + err.message);"/>
									<outline text="if (callback !== undefined) {">
										<outline text="callback (undefined);"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="console.log (&quot;result == &quot; + utils.jsonStringify (result));" isComment="true"/>
									<outline text="if (callback !== undefined) {">
										<outline text="callback (result);"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text=""/>
				<outline text="function checkSubscriptionQueue () { //called every tenth second">
					<outline text="if (!flSubscriptionQueryPending) {">
						<outline text="if (ixNextSubscription &gt;= theSubscriptions.length) {">
							<outline text="clearInterval (subscriptionInterval); //advance to next state; "/>
							<outline text="feedInterval = setInterval (checkFeedQueue, 10); "/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="flSubscriptionQueryPending = true;"/>
							<outline text="var whenstart = new Date ();"/>
							<outline text="try {">
								<outline text="var theSubscription = theSubscriptions [ixNextSubscription++];"/>
								<outline text=""/>
								<outline text="if (theSubscription.whenupdated != null) {">
									<outline text="theSubscription.whenupdated = formatDateTime (theSubscription.whenupdated);"/>
									<outline text="}"/>
									</outline>
								<outline text=""/>
								<outline text="var sqltext = &quot;replace into subscriptions &quot; + encodeValues (theSubscription);"/>
								<outline text="runSqltext (sqltext, function (result) {">
									<outline text="console.log (&quot;#&quot; + ixNextSubscription + &quot;: &quot; + theSubscription.username + &quot;, &quot; + utils.secondsSince (whenstart) + &quot; secs.&quot;);"/>
									<outline text="flSubscriptionQueryPending = false;"/>
									<outline text="});"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="catch (err) {">
								<outline text="console.log (err.message);"/>
								<outline text="flSubscriptionQueryPending = false;"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function checkFeedQueue () { //called every tenth second">
					<outline text="if (!flFeedQueryPending) {">
						<outline text="if (ixNextFeed &gt;= theFeeds.length) {">
							<outline text="clearInterval (feedInterval); //advance to next state; "/>
							<outline text="console.log (&quot;Have a nice day.&quot;);"/>
							<outline text="process.exit (); //exit to OS"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="flFeedQueryPending = true;"/>
							<outline text="var whenstart = new Date ();"/>
							<outline text="try {">
								<outline text="var theFeed = theFeeds [ixNextFeed++];"/>
								<outline text=""/>
								<outline text="if (theFeed.whenUpdated != null) {">
									<outline text="theFeed.whenUpdated = formatDateTime (theFeed.whenUpdated);"/>
									<outline text="}"/>
									</outline>
								<outline text="if (theFeed.whenLastError != null) {">
									<outline text="theFeed.whenLastError = formatDateTime (theFeed.whenLastError);"/>
									<outline text="}"/>
									</outline>
								<outline text=""/>
								<outline text="var sqltext = &quot;replace into feeds &quot; + encodeValues (theFeed);"/>
								<outline text="runSqltext (sqltext, function (result) {">
									<outline text="console.log (&quot;#&quot; + ixNextFeed + &quot;: &quot; + theFeed.feedUrl + &quot;, &quot; + utils.secondsSince (whenstart) + &quot; secs.&quot;);"/>
									<outline text="flFeedQueryPending = false;"/>
									<outline text="});"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="catch (err) {">
								<outline text="console.log (err.message);"/>
								<outline text="flFeedQueryPending = false;"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function readFeeds (callback) {">
					<outline text="fs.readFile (config.backupFolderPath + &quot;feeds.json&quot;, function (err, jsontext) {">
						<outline text="theFeeds = JSON.parse (jsontext);"/>
						<outline text="console.log (&quot;readFeeds: theFeeds.length == &quot; + theFeeds.length);"/>
						<outline text="callback ();"/>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function readSubscriptions (callback) {">
					<outline text="fs.readFile (config.backupFolderPath + &quot;subscriptions.json&quot;, function (err, jsontext) {">
						<outline text="theSubscriptions = JSON.parse (jsontext);"/>
						<outline text="console.log (&quot;readSubscriptions: theSubscriptions.length == &quot; + theSubscriptions.length);"/>
						<outline text="callback ();"/>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text=""/>
				<outline text="function readConfig (callback) {">
					<outline text="utils.sureFilePath (fnameConfig, function () {">
						<outline text="fs.readFile (fnameConfig, function (err, data) {">
							<outline text="if (!err) {">
								<outline text="try {">
									<outline text="var jstruct = JSON.parse (data.toString ());"/>
									<outline text="console.log (utils.jsonStringify (jstruct)); " isComment="true"/>
									<outline text="for (var x in jstruct) {">
										<outline text="config [x] = jstruct [x];"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="catch (err) {">
									<outline text="console.log (&quot;readConfig: err == &quot; + err.message);"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="if (callback !== undefined) {">
								<outline text="callback ();"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function everySecond () {">
					<outline text="if (utils.secondsSince (stats.whenLastFeedUpdate) &gt; config.ctSecsBetwFeedUpdates) {">
						<outline text="stats.whenLastFeedUpdate = new Date ();"/>
						<outline text="updateLeastRecentlyUpdatedFeed (function () {">
							<outline text="stats.ctFeedUpdates++;"/>
							<outline text="stats.ctFeedUpdatesToday++;"/>
							<outline text="stats.ctFeedUpdatesThisRun++;"/>
							<outline text="statsChanged ();"/>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="if (flStatsChanged) {">
						<outline text="flStatsChanged = false;"/>
						<outline text="writeStats ();"/>
						<outline text="}"/>
						</outline>
					<outline text="writeLogIfChanged (); //3/26/18 by DW"/>
					<outline text="}"/>
					</outline>
				<outline text="readConfig (function () {">
					<outline text="console.log (&quot;config == &quot; + utils.jsonStringify (config));"/>
					<outline text="theSqlConnectionPool = mysql.createPool (config.database);"/>
					<outline text="readSubscriptions (function () {">
						<outline text="readFeeds (function () {">
							<outline text="subscriptionInterval = setInterval (checkSubscriptionQueue, 10); "/>
							<outline text="});"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="});"/>
					</outline>
				</outline>
			<outline text="backup/package.json">
				<outline text="{">
					<outline text="&quot;name&quot;: &quot;feedbasebackup&quot;,"/>
					<outline text="&quot;description&quot;: &quot;Backing up the feedBase database.&quot;,"/>
					<outline text="&quot;author&quot;: &quot;Dave Winer &lt;dave@smallpicture.com&gt;&quot;,"/>
					<outline text="&quot;version&quot;: &quot;0.4.0&quot;,"/>
					<outline text="&quot;dependencies&quot; : {">
						<outline text="&quot;mysql&quot;: &quot;*&quot;,"/>
						<outline text="&quot;daveutils&quot;: &quot;*&quot;,"/>
						<outline text="&quot;dateformat&quot;: &quot;*&quot;,"/>
						<outline text="&quot;daves3&quot;: &quot;*&quot;"/>
						<outline text="}, "/>
						</outline>
					<outline text="&quot;license&quot;: &quot;MIT&quot;,"/>
					<outline text="&quot;engines&quot;: {">
						<outline text="&quot;node&quot;: &quot;*&quot;"/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="folderloader.js" isComment="true">
				<outline text="[[http://scripting.com/code/s3folderloader/loadfolder.js]]"/>
				</outline>
			</outline>
		<outline text="/scripting.com/code/testing/readopmlfeedly/">
			<outline text="test.js">
				<outline text="const opml = require (&quot;daveopml&quot;);"/>
				<outline text="const utils = require (&quot;daveutils&quot;);"/>
				<outline text="const fs = require (&quot;fs&quot;);"/>
				<outline text=""/>
				<outline text="function readTheFile (f, flExpandIncludes, callback) {">
					<outline text=""/>
					<outline text="var feedlist = new Array ();"/>
					<outline text="function getFeeds (theOutline) {">
						<outline text="if (theOutline.subs !== undefined) {">
							<outline text="for (var i = 0; i &lt; theOutline.subs.length; i++) {">
								<outline text="var node = theOutline.subs [i];"/>
								<outline text="if (node.xmlurl !== undefined) {">
									<outline text="feedlist.push (node.xmlurl);"/>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="getFeeds (node);"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text=""/>
					<outline text="opml.readOpmlFile (f, function (theOutline) {">
						<outline text="if (theOutline !== undefined) {">
							<outline text="console.log (utils.jsonStringify (theOutline));" isComment="true"/>
							<outline text="getFeeds (theOutline);"/>
							<outline text="callback (feedlist);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="callback (undefined);"/>
							<outline text="}"/>
							</outline>
						<outline text="}, flExpandIncludes);"/>
						</outline>
					<outline text=""/>
					<outline text="fs.readFile (f, function (err, data) {" isComment="true">
						<outline text="console.log (data.toString ());"/>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text=""/>
				<outline text="readTheFile (&quot;scottHanson.opml&quot;, false, function (feedlist) {">
					<outline text="if (feedlist !== undefined) {">
						<outline text="console.log (&quot;There are &quot; + feedlist.length + &quot; feeds in the list.&quot;);"/>
						<outline text="console.log (utils.jsonStringify (feedlist));"/>
						<outline text="}"/>
						</outline>
					<outline text="});"/>
					</outline>
				<outline text=""/>
				<outline text=""/>
				<outline text=""/>
				</outline>
			<outline text="package.json">
				<outline text="{">
					<outline text="&quot;name&quot;: &quot;test&quot;,"/>
					<outline text="&quot;description&quot;: &quot;Testing hierarchical OPML subscription lists.&quot;,"/>
					<outline text="&quot;author&quot;: &quot;Dave Winer &lt;dave@smallpicture.com&gt;&quot;,"/>
					<outline text="&quot;version&quot;: &quot;0.4.0&quot;,"/>
					<outline text="&quot;dependencies&quot; : {">
						<outline text="&quot;daveutils&quot;: &quot;*&quot;,"/>
						<outline text="&quot;daveopml&quot;: &quot;*&quot;"/>
						<outline text="}, "/>
						</outline>
					<outline text="&quot;license&quot;: &quot;MIT&quot;,"/>
					<outline text="&quot;engines&quot;: {">
						<outline text="&quot;node&quot;: &quot;*&quot;"/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			</outline>
		<outline text="/opml.feedbase.io/">
			<outline text="index.html">
				<outline text="&lt;html&gt;">
					<outline text="&lt;head&gt;">
						<outline text="&lt;title&gt;opml.feedbase.io&lt;/title&gt;"/>
						<outline text="&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;"/>
						<outline text="&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;"/>
						<outline text="&lt;%basicIncludes2%&gt;"/>
						<outline text="&lt;script&gt;" created="Thu, 12 Dec 2013 17:06:51 GMT" pgfnum="33502">
							<outline text="function everySecond () {">
								<outline text="}"/>
								</outline>
							<outline text="function startup () {">
								<outline text="console.log (&quot;startup&quot;);"/>
								<outline text="self.setInterval (function () {everySecond ()}, 1000); "/>
								<outline text="}"/>
								</outline>
							<outline text="&lt;/script&gt;" created="Thu, 12 Dec 2013 17:07:17 GMT" pgfnum="33504"/>
							</outline>
						<outline text="&lt;style&gt;" created="Wed, 11 Sep 2013 14:27:45 GMT" pgfnum="30095">
							<outline text="body {">
								<outline text="font-family: Ubuntu;"/>
								<outline text="font-size: 18px;"/>
								<outline text="background-color: whitesmoke;"/>
								<outline text="}"/>
								</outline>
							<outline text=".divPageBody {">
								<outline text="width: 60%;"/>
								<outline text="margin-top: 90px;"/>
								<outline text="margin-left: auto;"/>
								<outline text="margin-right: auto;"/>
								<outline text="}"/>
								</outline>
							<outline text="li {">
								<outline text="margin-bottom: 10px;"/>
								<outline text="}"/>
								</outline>
							<outline text="&lt;/style&gt;" created="Wed, 11 Sep 2013 14:30:17 GMT" pgfnum="30105"/>
							</outline>
						<outline text="&lt;/head&gt;"/>
						</outline>
					<outline text="&lt;body&gt;">
						<outline text="&lt;div class=&quot;divPageBody&quot;&gt;">
							<outline text="&lt;h1&gt;opml.feedbase.io&lt;/h1&gt;"/>
							<outline text="&lt;p&gt;Greetings. This is where we store user and system OPML files from the &lt;a href=&quot;http://feedbase.io/&quot;&gt;feedBase&lt;/a&gt; app.&lt;/p&gt;"/>
							<outline text="&lt;p&gt;A couple of examples:&lt;/p&gt;&lt;ul&gt;">
								<outline text="&lt;li&gt;&lt;a href=&quot;davewiner/main.opml&quot;&gt;My OPML subscription list&lt;/a&gt;&lt;/li&gt;"/>
								<outline text="&lt;li&gt;&lt;a href=&quot;hotlist.opml&quot;&gt;The system hotlist list in OPML&lt;/a&gt;&lt;/li&gt;"/>
								<outline text="&lt;/ul&gt;"/>
								</outline>
							<outline text="&lt;p&gt;Dave Winer, March 2018&lt;/p&gt;"/>
							<outline text="&lt;/div&gt;"/>
							</outline>
						<outline text="&lt;script&gt;">
							<outline text="$(document).ready (function () {">
								<outline text="startup ();" created="Wed, 30 Oct 2013 15:20:06 GMT" pgfnum="30656"/>
								<outline text="});"/>
								</outline>
							<outline text="&lt;/script&gt;"/>
							</outline>
						<outline text="&lt;/body&gt;"/>
						</outline>
					<outline text="&lt;/html&gt;"/>
					</outline>
				</outline>
			</outline>
		<outline text="build script">
			<outline text="nodeEditorSuite.utilities.buildFeedbase ()"/>
			</outline>
		</body>
	</opml>
